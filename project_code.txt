
================================================================================

================================================================================
ФАЙЛ: import_templates.py
================================================================================
import sqlite3
import json

DB_PATH = 'database.db'  # или укажи абсолютный путь, если база не рядом
JSON_FILE = 'templates.json'

with open(JSON_FILE, encoding='utf-8') as f:
    templates = json.load(f)

conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

for tpl in templates:
    cursor.execute('''
        INSERT INTO task_templates 
        (textbook_id, name, question_template, answer_template, parameters)
        VALUES (?, ?, ?, ?, ?)
    ''', (
        tpl['textbook_id'],
        tpl['name'],
        tpl['question_template'],
        tpl['answer_template'],
        json.dumps(tpl['parameters'], ensure_ascii=False)
    ))

conn.commit()
conn.close()

print("✅ Шаблоны успешно загружены в базу данных.")

================================================================================
ФАЙЛ: math_engine.py
================================================================================
# math_engine.py
import random
import sympy
from sympy.parsing.sympy_parser import parse_expr

class MathEngine:
    @staticmethod
    def generate_parameters(template_params):
        params = {}
        conditions = template_params.get('conditions', '')
        
        for _ in range(100):  # Максимум 100 попыток
            generated = {}
            valid = True
            
            # Генерация параметров с учетом ограничений
            for param, config in template_params.items():
                if param == 'conditions':
                    continue
                    
                if config['type'] == 'int':
                    value = random.randint(config['min'], config['max'])
                    
                    # Применяем ограничения
                    if 'constraints' in config:
                        for constraint in config['constraints']:
                            if constraint['type'] == 'multiple_of':
                                # Корректируем значение чтобы было кратно
                                remainder = value % constraint['value']
                                if remainder != 0:
                                    value += (constraint['value'] - remainder)
                                    # Проверяем не вышли ли за границы
                                    if value > config['max']:
                                        value -= constraint['value']
                    generated[param] = value
            
            # Проверка условий
            if valid and conditions:
                try:
                    if not eval(conditions, {}, generated):
                        valid = False
                except:
                    valid = False
            
            if valid:
                return generated
        
        # Если не удалось сгенерировать - возвращаем последний вариант
        return generated

    @staticmethod
    def evaluate_expression(expr, params):
        try:
            # Безопасный eval с sympy
            local_dict = {k: sympy.Integer(v) if isinstance(v, int) else sympy.Float(v) 
                         for k, v in params.items()}
            return str(parse_expr(expr, local_dict=local_dict).evalf())
        except Exception as e:
            print(f"Error evaluating expression: {expr} with params {params}. Error: {e}")
            return None
================================================================================
ФАЙЛ: migrate_db.py
================================================================================
import sqlite3
from app import DATABASE

def migrate():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    try:
        # Добавляем новый столбец template_id
        cursor.execute("PRAGMA table_info(lesson_tasks)")
        columns = [col[1] for col in cursor.fetchall()]
        
        if 'template_id' not in columns:
            print("Добавляем столбец template_id в lesson_tasks...")
            cursor.execute('''
                ALTER TABLE lesson_tasks
                ADD COLUMN template_id INTEGER REFERENCES task_templates(id)
            ''')
            conn.commit()
            print("Миграция успешно выполнена!")
        else:
            print("Структура БД уже актуальна")
            
    except Exception as e:
        print(f"Ошибка миграции: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == '__main__':
    migrate()
================================================================================
ФАЙЛ: task_generator.py
================================================================================
import re
from math_engine import MathEngine
import random

class TaskGenerator:
    @staticmethod
    def generate_task_variant(template):
        # Проверяем наличие всех необходимых полей
        if not all(key in template for key in ['question_template', 'answer_template', 'parameters']):
            return None

        # Генерация параметров
        params = MathEngine.generate_parameters(template['parameters'])
        if not params:
            return None

        # Замена в вопросе
        question = template['question_template']
        answer_template = template['answer_template']

        # Извлекаем все параметры из вопроса и ответа
        question_params = set(re.findall(r'\{([A-Za-z]+)\}', question))
        answer_params = set(re.findall(r'\{([A-Za-z]+)\}', answer_template))
        all_params = question_params.union(answer_params)

        # Генерируем значения для всех параметров
        for param in all_params:
            if param not in params:
                # Если параметр не указан в конфигурации, генерируем случайное значение
                params[param] = random.randint(1, 10)

        # Заменяем параметры в вопросе
        for param, value in params.items():
            question = question.replace(f'{{{param}}}', str(value))

        # Вычисление ответа
        try:
            answer = str(eval(answer_template.format(**params)))
        except Exception as e:
            print(f"Ошибка вычисления ответа: {e}")
            answer = "Неверная формула ответа"

        return {
            'question': question,
            'correct_answer': answer,
            'params': params,
            'template_id': template.get('id')
        }

    @staticmethod
    def extract_parameters(template_str):
        return list(set(re.findall(r'\{([A-Za-z]+)\}', template_str)))
================================================================================
ФАЙЛ: static\css\edit_lesson.css
================================================================================
/* Боковая панель с шаблонами */
.templates-sidebar {
    width: 300px;
    background: #f8f9fa;
    border-right: 1px solid #ddd;
    padding: 20px;
    height: calc(100vh - 80px);
    position: fixed;
    overflow-y: auto;
}

.sidebar-header {
    margin-bottom: 15px;
}

.templates-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.search-box {
    margin-bottom: 15px;
}

.search-box input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.template-item {
    background: white;
    padding: 12px;
    border-radius: 6px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: all 0.2s;
}

.template-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.template-item h4 {
    margin: 0 0 5px 0;
    color: var(--primary-color);
}

.template-item p {
    margin: 0;
    font-size: 14px;
    color: var(--light-text);
}

.template-item .template-actions {
    display: flex;
    gap: 8px;
    margin-top: 10px;
}

/* Адаптация основного контента */
.tasks-section {
    margin-left: 320px;
    width: calc(100% - 320px);
}

@media (max-width: 992px) {
    .templates-sidebar {
        width: 250px;
    }
    .tasks-section {
        margin-left: 260px;
        width: calc(100% - 260px);
    }
}

@media (max-width: 768px) {
    .templates-sidebar {
        position: static;
        width: 100%;
        height: auto;
        border-right: none;
        border-bottom: 1px solid #ddd;
    }
    .tasks-section {
        margin-left: 0;
        width: 100%;
    }
}
/* В edit_lesson.css */
.param-constraints {
    margin-top: 10px;
    border-top: 1px dashed #ddd;
    padding-top: 10px;
}

.constraint {
    display: flex;
    gap: 10px;
    margin: 5px 0;
    align-items: center;
}

.constraint-type {
    flex: 1;
}

.constraint-value {
    flex: 2;
}

/* Основные стили контейнера */
.edit-lesson-container {
    display: flex;
    gap: 20px;
    padding: 20px;
}

/* Боковая панель с учебниками */
.textbook-sidebar {
    width: 300px;
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
    height: calc(100vh - 180px);
    overflow-y: auto;
}

.sidebar-header {
    margin-bottom: 15px;
}

.templates-list {
    margin-top: 15px;
}

/* Основная область редактирования */
.lesson-edit-area {
    flex: 1;
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Стили для списка заданий из учебника */
.template-item {
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
}

.template-item:hover {
    background: #e9f5ff;
    border-color: #b8daff;
}

.template-item h4 {
    margin: 0 0 5px 0;
    color: #333;
}

.template-item p {
    margin: 0;
    color: #666;
    font-size: 14px;
}

.template-actions {
    margin-top: 10px;
}

/* Адаптация для мобильных устройств */
@media (max-width: 768px) {
    .edit-lesson-container {
        flex-direction: column;
    }
    
    .textbook-sidebar {
        width: 100%;
        height: auto;
        max-height: 300px;
    }
}
/* Стили для блока предпросмотра */
.teacher-preview {
    margin-top: 15px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 5px;
    border: 1px solid #eee;
}

.teacher-preview h4 {
    margin-top: 0;
}

.preview-content {
    margin-bottom: 10px;
}

.preview-content p {
    margin: 5px 0;
}

.btn-show-preview {
    margin-top: 10px;
    background: #e2e6ea;
}

.btn-generate-preview {
    background: #d1ecf1;
    color: #0c5460;
}
.bulk-actions {
    margin: 15px 0;
    display: flex;
    gap: 10px;
}

.template-checkbox {
    margin-right: 10px;
}
================================================================================
ФАЙЛ: static\css\math_editor.css
================================================================================
.math-editor {
    margin-top: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 15px;
}

.math-toolbar {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    margin-bottom: 10px;
}

.btn-math {
    padding: 5px 10px;
    background: var(--secondary-color);
    border: none;
    border-radius: 3px;
    cursor: pointer;
}

.math-editor-area {
    width: 100%;
    min-height: 100px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-family: monospace;
}

.math-preview {
    margin-top: 10px;
    padding: 10px;
    background: #f9f9f9;
    border-radius: 5px;
    min-height: 50px;
}

.param-group {
    margin-bottom: 10px;
}

.param-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
}

.param-input, .param-select {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}
================================================================================
ФАЙЛ: static\css\style.css
================================================================================
:root {
    --primary-color: #4a6bff;
    --secondary-color: #f5f7ff;
    --error-color: #ff4757;
    --success-color: #2ed573;
    --text-color: #2f3542;
    --light-text: #747d8c;
    --white: #ffffff;
    --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
}

body {
    background-color: #f1f2f6;
    color: var(--text-color);
    line-height: 1.6;
}

/* Auth Styles */
.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.auth-card {
    background: var(--white);
    border-radius: 10px;
    box-shadow: var(--shadow);
    padding: 30px;
    width: 100%;
    max-width: 450px;
}

.auth-header {
    text-align: center;
    margin-bottom: 30px;
}

.auth-logo {
    width: 80px;
    height: 80px;
    margin-bottom: 15px;
}

.auth-header h1 {
    font-size: 24px;
    font-weight: 700;
    margin-bottom: 5px;
}

.auth-header p {
    color: var(--light-text);
    font-size: 14px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}

.form-group input {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
    transition: border 0.3s;
}

.form-group input:focus {
    border-color: var(--primary-color);
    outline: none;
}

.btn {
    display: inline-block;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    text-align: center;
    transition: all 0.3s;
    text-decoration: none;
}

.btn-primary {
    background-color: var(--primary-color);
    color: var(--white);
    width: 100%;
}

.btn-primary:hover {
    background-color: #3a56e0;
}

.alert {
    padding: 12px;
    border-radius: 5px;
    margin-bottom: 20px;
    font-size: 14px;
}

.alert-error {
    background-color: #ffebee;
    color: var(--error-color);
    border: 1px solid #ffcdd2;
}

.auth-footer {
    margin-top: 20px;
    text-align: center;
    font-size: 14px;
    color: var(--light-text);
}

/* Dashboard Styles */
.dashboard-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

.dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 30px;
    background-color: var(--white);
    box-shadow: var(--shadow);
}

.header-left {
    display: flex;
    align-items: center;
}

.header-logo {
    width: 40px;
    height: 40px;
    margin-right: 15px;
}

.header-right {
    display: flex;
    align-items: center;
}

.user-greeting {
    margin-right: 20px;
    font-weight: 500;
}

.btn-logout {
    background-color: var(--secondary-color);
    color: var(--primary-color);
}

.btn-logout:hover {
    background-color: #e0e5ff;
}

.dashboard-main {
    flex: 1;
    padding: 30px;
}

.welcome-section {
    text-align: center;
    margin-bottom: 40px;
}

.welcome-section h2 {
    font-size: 28px;
    margin-bottom: 10px;
}

.welcome-section p {
    color: var(--light-text);
    max-width: 600px;
    margin: 0 auto;
}

.subjects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 30px;
}

.subject-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    text-align: center;
    transition: transform 0.3s;
}

.subject-card:hover {
    transform: translateY(-5px);
}

.subject-icon {
    width: 60px;
    height: 60px;
    margin: 0 auto 15px;
    background-color: var(--secondary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.subject-icon svg {
    width: 30px;
    height: 30px;
    color: var(--primary-color);
}

.subject-card h3 {
    margin-bottom: 10px;
    font-size: 20px;
}

.subject-card p {
    color: var(--light-text);
    margin-bottom: 20px;
    font-size: 14px;
}

.btn-subject {
    background-color: var(--primary-color);
    color: var(--white);
    padding: 8px 20px;
    font-size: 14px;
}

/* Teacher Dashboard */
.teacher-dashboard .welcome-section {
    text-align: left;
    margin-bottom: 30px;
}

.teacher-actions {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

.action-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    transition: transform 0.3s;
}

.action-card:hover {
    transform: translateY(-5px);
}

.action-card h3 {
    margin-bottom: 10px;
    font-size: 18px;
}

.action-card p {
    color: var(--light-text);
    margin-bottom: 20px;
    font-size: 14px;
}

.btn-action {
    background-color: var(--primary-color);
    color: var(--white);
    padding: 8px 20px;
    font-size: 14px;
}
/* Добавляем в style.css */
.class-selection {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.grade-buttons, .letter-buttons {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    margin: 15px 0;
}

.btn-grade, .btn-letter {
    padding: 8px 15px;
    background: var(--secondary-color);
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;
}

.btn-grade:hover, .btn-letter:hover {
    background: #d0d8ff;
}

.btn-grade.active, .btn-letter.active {
    background: var(--primary-color);
    color: white;
}

.hidden {
    display: none;
}

/* Модальное окно */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    padding: 25px;
    border-radius: 8px;
    width: 80%;
    max-width: 700px;
    max-height: 90vh;
    overflow-y: auto;
}

.close {
    float: right;
    font-size: 24px;
    cursor: pointer;
}

.task-template textarea {
    width: 100%;
    min-height: 100px;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.parameters {
    margin: 15px 0;
}

.param-control {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
    align-items: center;
}

.param-control input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.btn-small {
    padding: 5px 10px;
    font-size: 14px;
}
/* Стили для модального окна */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal.hidden {
    display: none;
}

.modal:not(.hidden) {
    display: flex;
}

.modal-content {
    background: white;
    padding: 25px;
    border-radius: 8px;
    width: 90%;
    max-width: 600px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

/* Стили для параметров */
.param-row {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
}

.param-row input {
    width: 80px;
    padding: 6px;
}

.btn-remove-param {
    background: #ff4757;
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    cursor: pointer;
}

/* Стили для списка уроков */
.lessons-list {
    margin-top: 30px;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: var(--shadow);
}

.lessons-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 15px;
}

.lesson-card {
    display: flex;
    flex-direction: column;
    background: var(--secondary-color);
    padding: 15px;
    border-radius: 8px;
    transition: transform 0.3s;
}

.lesson-card:hover {
    transform: translateY(-3px);
}

.lesson-icon {
    width: 40px;
    height: 40px;
    background: var(--primary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
}

.lesson-icon svg {
    width: 20px;
    height: 20px;
    color: white;
}

.lesson-info h4 {
    margin-bottom: 5px;
}

.lesson-info p {
    color: var(--light-text);
    font-size: 14px;
}

.lesson-actions {
    margin-top: 15px;
    display: flex;
    gap: 10px;
}

.btn-small {
    padding: 6px 12px;
    font-size: 14px;
}

.edit-lesson-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.lesson-meta {
    background: var(--secondary-color);
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.tasks-section {
    margin-top: 30px;
}

.task-card {
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 15px;
}

.task-question, .task-answer {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    min-height: 60px;
}

.btn-remove-task {
    background: var(--error-color);
    color: white;
}

.save-actions {
    margin-top: 30px;
    text-align: center;
}

.btn-save {
    background: var(--success-color);
    padding: 12px 30px;
}
/* Стили для редактирования урока */
.edit-lesson-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 30px;
}

.task-creation-guide {
    background: var(--secondary-color);
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.task-creation-guide h4 {
    margin-bottom: 10px;
    color: var(--primary-color);
}

.task-card {
    background: var(--white);
    border-radius: 10px;
    padding: 20px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.task-header h3 {
    margin: 0;
    color: var(--primary-color);
}

.task-question, .task-answer {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-bottom: 15px;
    font-size: 16px;
    min-height: 80px;
    resize: vertical;
}

.task-question:focus, .task-answer:focus {
    border-color: var(--primary-color);
    outline: none;
}

.task-preview {
    background: #f9f9f9;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 15px;
}

.task-preview h4 {
    margin-top: 0;
    color: var(--light-text);
    font-size: 14px;
}

.example {
    background: white;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
}

.example p {
    margin: 5px 0;
}

.params {
    font-size: 12px;
    color: var(--light-text);
}

.answer-section {
    margin-top: 15px;
}

.answer-section label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}

.hint {
    font-size: 13px;
    color: var(--light-text);
    margin-top: 5px;
}
.task-number {
    color: var(--primary-color);
    font-weight: bold;
}

/* Стили для списка уроков ученика */
.lessons-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.lesson-card {
    background: var(--white);
    border-radius: 10px;
    padding: 20px;
    box-shadow: var(--shadow);
    transition: transform 0.3s;
}

.lesson-card:hover {
    transform: translateY(-5px);
}

.lesson-icon {
    width: 50px;
    height: 50px;
    background: var(--primary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 15px;
}

.lesson-icon svg {
    width: 24px;
    height: 24px;
    color: white;
}

.lesson-info h3 {
    margin-bottom: 10px;
    color: var(--primary-color);
}

.lesson-info p {
    color: var(--light-text);
    margin-bottom: 5px;
    font-size: 14px;
}

.lesson-actions {
    margin-top: 15px;
}
/* Стили для заданий ученика */
.task-card {
    background: var(--white);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: var(--shadow);
}

.task-question {
    margin-bottom: 15px;
    font-size: 16px;
}

.task-question p {
    margin: 0;
}

.task-answer {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 10px;
}

.answer-input {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    flex-grow: 1;
}

.result {
    margin-top: 10px;
    padding: 8px;
    border-radius: 4px;
}

.hidden {
    display: none;
}
/* Основные стили урока */
.lesson-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    font-family: 'Roboto', sans-serif;
}

.lesson-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
}

.lesson-header h1 {
    color: var(--primary-color);
    margin: 0;
}

.lesson-meta {
    font-size: 14px;
    color: var(--light-text);
    margin-top: 5px;
}

.lesson-meta span {
    margin-right: 15px;
}

/* Стили заданий */
.task-card {
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 20px;
    overflow: hidden;
    transition: all 0.3s ease;
}

.task-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background: var(--secondary-color);
}

.task-number {
    font-weight: 500;
    color: var(--primary-color);
}

.task-status {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid #ddd;
}

.task-body {
    padding: 20px;
}

.task-question {
    font-size: 16px;
    line-height: 1.6;
    margin-bottom: 20px;
}

.task-answer {
    display: flex;
    gap: 10px;
}

.answer-input {
    flex: 1;
    padding: 10px 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
}

/* Стили обратной связи */
.task-feedback {
    margin-top: 15px;
    padding: 15px;
    border-radius: 5px;
}

.feedback-correct {
    color: var(--success-color);
    display: flex;
    align-items: center;
    gap: 10px;
}

.feedback-incorrect {
    color: var(--error-color);
    display: flex;
    align-items: center;
    gap: 10px;
}

.icon {
    font-size: 20px;
    font-weight: bold;
}

.btn-hint {
    margin-left: 15px;
    background: none;
    border: none;
    color: var(--primary-color);
    cursor: pointer;
    text-decoration: underline;
}

.task-hint {
    margin-top: 15px;
    padding: 15px;
    background: #f9f9f9;
    border-radius: 5px;
    border-left: 3px solid var(--primary-color);
}

/* Прогресс */
.lesson-progress {
    margin-top: 30px;
    padding: 20px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.progress-bar {
    height: 10px;
    background: #f0f0f0;
    border-radius: 5px;
    margin: 10px 0;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: var(--primary-color);
    transition: width 0.3s ease;
}

.progress-text {
    text-align: center;
    color: var(--light-text);
    font-size: 14px;
}

/* Утилиты */
.hidden {
    display: none;
}

/* Стили для управления заданиями */
.manage-tasks-container {
    padding: 20px;
}

.textbooks-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.textbook-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    text-align: center;
    transition: transform 0.3s;
}

.textbook-card:hover {
    transform: translateY(-5px);
}

.textbook-icon {
    width: 60px;
    height: 60px;
    margin: 0 auto 15px;
    background-color: var(--secondary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.textbook-icon svg {
    width: 30px;
    height: 30px;
    color: var(--primary-color);
}
/* Стили для управления шаблонами заданий */
.textbook-tasks-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    padding: 20px;
}

.template-card {
    background: var(--white);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: var(--shadow);
}

.template-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.template-content {
    font-size: 14px;
}

.param-group {
    background: var(--secondary-color);
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
}

.param-control {
    display: flex;
    align-items: center;
    margin: 5px 0;
}

.param-control label {
    width: 80px;
    margin-right: 10px;
}

.param-control input {
    width: 60px;
    padding: 5px;
}
.manage-tasks-container {
    padding: 20px;
}

.textbooks-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.textbook-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    text-align: center;
    transition: transform 0.3s;
}

.textbook-card:hover {
    transform: translateY(-5px);
}

.textbook-icon {
    width: 60px;
    height: 60px;
    margin: 0 auto 15px;
    background-color: var(--secondary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.textbook-icon svg {
    width: 30px;
    height: 30px;
    color: var(--primary-color);
}
/* Стили для управления учебниками */
.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.add-form {
    background: var(--secondary-color);
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.add-form .form-group {
    margin-bottom: 15px;
}

.add-form label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
}

.add-form .form-control {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.form-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

.no-textbooks {
    text-align: center;
    padding: 40px;
    background: var(--secondary-color);
    border-radius: 8px;
    color: var(--light-text);
}
/* Стили для шаблонов заданий */
.task-card {
    background: var(--white);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: var(--shadow);
}

.task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.task-actions {
    display: flex;
    gap: 5px;
}

.task-content {
    font-size: 14px;
}

.task-field {
    margin-bottom: 10px;
}

.task-field label {
    font-weight: 500;
    display: block;
    margin-bottom: 5px;
}

.question-preview,
.answer-preview {
    background: var(--secondary-color);
    padding: 8px;
    border-radius: 4px;
}

.no-tasks {
    text-align: center;
    padding: 40px;
    background: var(--secondary-color);
    border-radius: 8px;
    color: var(--light-text);
}

.task-form {
    background: var(--white);
    padding: 20px;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.hint {
    font-size: 13px;
    color: var(--light-text);
    margin-top: 5px;
}
/* Стили для страницы шаблонов */
.textbook-tasks-container {
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.task-form {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    border: 1px solid #ddd;
}

.templates-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.template-card {
    background: white;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.template-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.template-actions {
    display: flex;
    gap: 10px;
}

.btn-icon {
    background: none;
    border: none;
    font-size: 16px;
    cursor: pointer;
    padding: 5px;
}

.no-templates {
    text-align: center;
    color: #666;
    padding: 20px;
}

.hidden {
    display: none;
}
/* Стили для страницы шаблонов */
.textbook-tasks-container {
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.task-form {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    border: 1px solid #ddd;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
}

.form-hint {
    color: #666;
    font-size: 0.9em;
}

.params-container {
    margin: 15px 0;
}

.param-group {
    background: #fff;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
    border: 1px solid #eee;
}

.param-row {
    display: flex;
    gap: 15px;
    margin-top: 5px;
}

.templates-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.template-card {
    background: white;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.template-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.template-actions {
    display: flex;
    gap: 10px;
}

.btn-icon {
    background: none;
    border: none;
    font-size: 16px;
    cursor: pointer;
    padding: 5px;
}

.no-templates {
    text-align: center;
    color: #666;
    padding: 20px;
}

.hidden {
    display: none;
}

.form-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}
.template-checkbox {
    display: inline-block !important;
    width: 18px !important;
    height: 18px !important;
    margin-right: 10px !important;
    opacity: 1 !important;
    visibility: visible !important;
    position: static !important;
}
================================================================================
ФАЙЛ: static\css\teacher_dashboard.css
================================================================================
/* Стили для проведения урока */
.conduct-lesson-container {
    padding: 20px;
}

.real-time-results {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.results-table-container {
    overflow-x: auto;
}

.results-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

.results-table th, .results-table td {
    padding: 12px 15px;
    text-align: center;
    border-bottom: 1px solid #eee;
}

.results-table th {
    background: var(--secondary-color);
    color: var(--primary-color);
    font-weight: 500;
}

.correct {
    color: var(--success-color);
    font-weight: bold;
}

.incorrect {
    color: var(--error-color);
    font-weight: bold;
}

.pending {
    color: var(--light-text);
}

.progress-container {
    position: relative;
    height: 20px;
    background: #f0f0f0;
    border-radius: 10px;
    overflow: hidden;
}

.progress-container .progress-bar {
    height: 100%;
    background: var(--primary-color);
    transition: width 0.3s ease;
}

.progress-container span {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 12px;
    color: white;
    z-index: 1;
}

.lesson-controls {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 20px;
}
.conduct-lesson-container {
    padding: 20px;
}

.class-info {
    margin-right: 20px;
    font-weight: 500;
    color: var(--primary-color);
}

.real-time-results {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.results-table-container {
    overflow-x: auto;
}

.results-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

.results-table th, .results-table td {
    padding: 12px 15px;
    text-align: center;
    border-bottom: 1px solid #eee;
}

.results-table th {
    background: var(--secondary-color);
    color: var(--primary-color);
    font-weight: 500;
}

.task-result .correct {
    color: var(--success-color);
    font-weight: bold;
}

.task-result .incorrect {
    color: var(--error-color);
    font-weight: bold;
}

.task-result .pending {
    color: var(--light-text);
}

.progress-container {
    position: relative;
    height: 20px;
    background: #f0f0f0;
    border-radius: 10px;
    overflow: hidden;
}

.progress-container .progress-bar {
    height: 100%;
    background: var(--primary-color);
    transition: width 0.3s ease;
}

.progress-container span {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 12px;
    color: white;
    z-index: 1;
}

.lesson-controls {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 20px;
}
================================================================================
ФАЙЛ: static\js\bulk_actions.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const textbookId = document.querySelector('.textbook-tasks-container').dataset.textbookId;
    const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');
    const selectAllBtn = document.getElementById('selectAllBtn');
    const checkboxes = document.querySelectorAll('.template-checkbox');
    
    // Обработчик выбора шаблонов
    function updateDeleteButton() {
        const selected = document.querySelectorAll('.template-checkbox:checked');
        deleteSelectedBtn.disabled = selected.length === 0;
        deleteSelectedBtn.textContent = selected.length > 0 ? 
            `Удалить выбранные (${selected.length})` : 'Удалить выбранные';
    }
    
    // Выбрать все/снять выделение
    selectAllBtn.addEventListener('click', function() {
        const allChecked = document.querySelectorAll('.template-checkbox:checked').length === checkboxes.length;
        checkboxes.forEach(checkbox => {
            checkbox.checked = !allChecked;
        });
        updateDeleteButton();
    });
    
    // Обработчики для чекбоксов
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateDeleteButton);
    });
    
    // Массовое удаление
    deleteSelectedBtn.addEventListener('click', function() {
        const selectedIds = Array.from(document.querySelectorAll('.template-checkbox:checked'))
            .map(checkbox => parseInt(checkbox.dataset.id));
        
        if (!selectedIds.length) return;
        
        if (confirm(`Вы уверены, что хотите удалить ${selectedIds.length} шаблонов?`)) {
            fetch('/teacher/bulk_delete_templates', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    textbook_id: textbookId,
                    template_ids: selectedIds
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`Удалено ${data.deleted_count} шаблонов`);
                    window.location.reload();
                } else {
                    alert('Ошибка удаления: ' + (data.error || ''));
                }
            });
        }
    });
});
================================================================================
ФАЙЛ: static\js\conduct_lesson.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const lessonId = window.location.pathname.split('/').pop();
    const refreshBtn = document.getElementById('refreshResults');
    const endLessonBtn = document.getElementById('endLesson');
    let studentIds = [];
    
    // Получаем ID всех учеников
    document.querySelectorAll('#studentsResults tr').forEach(row => {
        studentIds.push(row.dataset.studentId || row.cells[0].textContent.trim());
    });
    
    // Функция обновления результатов
    async function updateResults() {
        try {
            // Создаем массив промисов для каждого ученика
            const promises = studentIds.map(studentId => 
                fetch(`/teacher/get_student_progress/${lessonId}/${studentId}`)
                    .then(res => res.json())
            );
            
            const results = await Promise.all(promises);
            
            results.forEach(studentData => {
                updateStudentRow(studentData);
            });
        } catch (error) {
            console.error('Error updating results:', error);
        }
    }
    
    // Обновляем строку конкретного ученика
    function updateStudentRow(studentData) {
        const row = document.querySelector(`tr[data-student-id="${studentData.student_id}"]`) || 
                   [...document.querySelectorAll('#studentsResults tr')].find(tr => 
                       tr.cells[0].textContent.includes(studentData.student_id)
                   );
        
        if (!row) return;
        
        // Обновляем задания
        studentData.tasks.forEach((task, index) => {
            const taskCell = row.cells[index + 1]; // +1 потому что первая ячейка - имя
            if (taskCell) {
                if (task.answered) {
                    taskCell.innerHTML = task.is_correct ? 
                        '<span class="correct">✓</span>' : 
                        '<span class="incorrect">✗</span>';
                } else {
                    taskCell.innerHTML = '<span class="pending">—</span>';
                }
            }
        });
        
        // Обновляем прогресс
        const progressBar = row.querySelector('.progress-bar');
        const progressText = row.querySelector('.progress-container span');
        if (progressBar && progressText) {
            progressBar.style.width = `${studentData.progress}%`;
            progressText.textContent = `${studentData.progress}%`;
        }
    }
    
    // Первоначальная загрузка
    updateResults();
    
    // Автоматическое обновление каждые 3 секунды
    const intervalId = setInterval(updateResults, 3000);
    
    // Ручное обновление
    refreshBtn.addEventListener('click', updateResults);
    
    // Завершение урока
    endLessonBtn.addEventListener('click', function() {
        if (confirm('Завершить урок? Ученики больше не смогут отвечать.')) {
            fetch(`/teacher/end_lesson/${lessonId}`, {
                method: 'POST'
            }).then(response => {
                if (response.ok) {
                    clearInterval(intervalId);
                    window.location.href = '/teacher/dashboard';
                }
            });
        }
    });
    
    // Очистка при закрытии страницы
    window.addEventListener('beforeunload', () => clearInterval(intervalId));
});
================================================================================
ФАЙЛ: static\js\edit_lesson.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const lessonId = window.location.pathname.split('/').pop();
    const tasksContainer = document.getElementById('tasksContainer');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const saveLessonBtn = document.getElementById('saveLessonBtn');
    const textbookSelect = document.getElementById('textbookSelect');
    const templateSearch = document.getElementById('templateSearch');
    const templatesList = document.getElementById('templatesList');

    // Кэш для хранения загруженных шаблонов
    const templatesCache = {};

    // Загрузка шаблонов из учебника
    textbookSelect.addEventListener('change', loadTemplates);
    templateSearch.addEventListener('input', filterTemplates);

    // Добавление задания из шаблона
    templatesList.addEventListener('click', function(e) {
        if (e.target.classList.contains('btn-use-template')) {
            const templateId = e.target.dataset.templateId;
            addTaskFromTemplate(templateId);
        }
    });

    // Загрузка шаблонов
    function loadTemplates() {
        const textbookId = textbookSelect.value;
        if (!textbookId) {
            templatesList.innerHTML = '<div class="empty-state"><p>Выберите учебник для просмотра заданий</p></div>';
            return;
        }

        fetch(`/api/textbooks/${textbookId}/templates`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    renderTemplates(data.templates);
                }
            });
    }

    // Фильтрация шаблонов
    function filterTemplates() {
        const searchTerm = templateSearch.value.toLowerCase();
        const items = templatesList.querySelectorAll('.template-item');
        
        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            item.style.display = text.includes(searchTerm) ? 'block' : 'none';
        });
    }

    // Отображение шаблонов
    function renderTemplates(templates) {
        if (templates.length === 0) {
            templatesList.innerHTML = '<div class="empty-state"><p>В этом учебнике нет шаблонов заданий</p></div>';
            return;
        }

        templatesList.innerHTML = templates.map(template => `
            <div class="template-item">
                <h4>${template.name}</h4>
                <p>${template.question_template}</p>
                <div class="template-actions">
                    <button class="btn btn-small btn-use-template" data-template-id="${template.id}">
                        Добавить в урок
                    </button>
                </div>
            </div>
        `).join('');
    }

    // Добавление задания из шаблона
    function addTaskFromTemplate(templateId) {
        // Проверяем кэш
        if (templatesCache[templateId]) {
            processTemplate(templatesCache[templateId]);
            return;
        }
        
        fetch(`/api/templates/${templateId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    templatesCache[templateId] = data.template;
                    processTemplate(data.template);
                }
            });
    }

    function processTemplate(template) {
        addTask(template.question_template, template.answer_template);
        
        const taskCard = tasksContainer.lastElementChild;
        taskCard.dataset.templateId = template.id;
        
        // Добавляем отображение параметров
        const paramsDiv = document.createElement('div');
        paramsDiv.className = 'task-params';
        
        // Парсим параметры и условия
        const params = JSON.parse(template.parameters);
        const conditions = params.conditions || '';
        
        paramsDiv.innerHTML = `
            <h4>Параметры задания:</h4>
            <div class="params-grid">
                ${Object.entries(params).filter(([key]) => key !== 'conditions').map(([param, config]) => `
                <div class="param-group">
                    <div class="param-name">${param}:</div>
                    <div class="param-range">от ${config.min} до ${config.max}</div>
                    ${config.constraints ? `
                    <div class="param-constraints">
                        ${config.constraints.map(c => `
                        <div class="constraint">
                            <span class="constraint-type">${formatConstraintType(c.type)}:</span>
                            <span class="constraint-value">${c.value}</span>
                        </div>
                        `).join('')}
                    </div>
                    ` : ''}
                </div>
                `).join('')}
                ${conditions ? `
                <div class="conditions-group">
                    <div class="conditions-name">Условия:</div>
                    <div class="conditions-value">${conditions}</div>
                </div>
                ` : ''}
            </div>
        `;
        
        taskCard.insertBefore(paramsDiv, taskCard.querySelector('.teacher-preview'));
    }

    function formatConstraintType(type) {
        const types = {
            'multiple_of': 'Кратно',
            'greater_than': 'Больше чем',
            'less_than': 'Меньше чем',
            'equals': 'Равно'
        };
        return types[type] || type;
    }

    // Генерация примера для учителя
    function generateExample(questionTemplate, answerTemplate, taskCard) {
        const paramRegex = /\{([A-Za-z]+)\}/g;
        const params = {};
        let match;
        
        // Находим все параметры в шаблоне
        const allParams = new Set();
        while ((match = paramRegex.exec(questionTemplate + answerTemplate))) {
            allParams.add(match[1]);
        }
        
        // Проверяем, есть ли сохраненные параметры из шаблона
        let templateParams = null;
        let conditions = '';
        if (taskCard.dataset.templateId && templatesCache[taskCard.dataset.templateId]) {
            try {
                templateParams = JSON.parse(templatesCache[taskCard.dataset.templateId].parameters);
                conditions = templateParams.conditions || '';
            } catch (e) {
                console.error('Error parsing template params:', e);
            }
        }
        
        // Генерируем значения с учетом ограничений и условий
        let attempts = 0;
        const maxAttempts = 100; // Максимальное количество попыток
        
        generateParams: while (attempts < maxAttempts) {
            attempts++;
            params = {}; // Сбрасываем параметры перед каждой попыткой
            
            for (const param of allParams) {
                if (templateParams && templateParams[param]) {
                    // Используем параметры из шаблона
                    const config = templateParams[param];
                    let value;
                    
                    if (config.type === 'int') {
                        value = randomInt(config.min, config.max);
                        
                        // Применяем ограничения
                        if (config.constraints) {
                            for (const constraint of config.constraints) {
                                if (constraint.type === 'multiple_of') {
                                    const remainder = value % constraint.value;
                                    if (remainder !== 0) {
                                        value += (constraint.value - remainder);
                                        if (value > config.max) {
                                            value -= constraint.value;
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        value = randomInt(config.min, config.max);
                    }
                    
                    params[param] = value;
                } else {
                    // Генерируем случайное значение, если нет шаблона
                    params[param] = randomInt(1, 10);
                }
            }
            
            // Проверяем условия, если они есть
            if (conditions) {
                try {
                    // Заменяем {param} на params.param в условиях
                    let evalConditions = conditions;
                    for (const param in params) {
                        evalConditions = evalConditions.replace(
                            new RegExp(`\\{${param}\\}`, 'g'), 
                            params[param]
                        );
                    }
                    
                    // Выполняем проверку условий
                    if (!eval(evalConditions)) {
                        continue generateParams; // Условия не выполнены - пробуем снова
                    }
                } catch (e) {
                    console.error('Error evaluating conditions:', e);
                    // Если не удалось проверить условия, продолжаем
                    break;
                }
            }
            
            // Если дошли сюда - условия выполнены или их нет
            break;
        }
        
        // Заменяем параметры в вопросе
        let exampleQuestion = questionTemplate;
        for (const [param, value] of Object.entries(params)) {
            exampleQuestion = exampleQuestion.replace(new RegExp(`\\{${param}\\}`, 'g'), value);
        }
        
        // Вычисляем ответ
        let exampleAnswer;
        try {
            let answerFormula = answerTemplate;
            for (const [param, value] of Object.entries(params)) {
                answerFormula = answerFormula.replace(new RegExp(`\\{${param}\\}`, 'g'), value);
            }
            exampleAnswer = safeEval(answerFormula)?.toString() ?? "Ошибка в формуле";
        } catch (e) {
            exampleAnswer = "Ошибка в формуле ответа";
        }
        
        return {
            question: exampleQuestion,
            answer: exampleAnswer,
            params: params
        };
    }

    function randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // Безопасное вычисление выражения
    function safeEval(formula) {
        // Удаляем все потенциально опасные символы
        const cleanFormula = formula.replace(/[^0-9+\-*/().{}\s]/g, '');
        try {
            return new Function('return ' + cleanFormula)();
        } catch (e) {
            console.error('Ошибка вычисления:', e);
            return null;
        }
    }

    // Обновление предпросмотра
    function updatePreview(taskCard) {
        const question = taskCard.querySelector('.task-question').value;
        const answer = taskCard.querySelector('.task-answer').value;
        const preview = taskCard.querySelector('.teacher-preview');
        
        if (!question || !answer) {
            preview.classList.add('hidden');
            return;
        }
        
        const example = generateExample(question, answer, taskCard);
        
        taskCard.querySelector('.preview-question').textContent = example.question;
        taskCard.querySelector('.preview-answer').textContent = example.answer;
        taskCard.querySelector('.preview-params').textContent = 
            Object.entries(example.params).map(([k, v]) => `${k}=${v}`).join(', ');
        
        preview.classList.remove('hidden');
    }

    // Добавление нового задания
    function addTask(question = '', answer = '') {
        const taskNumber = tasksContainer.children.length + 1;
        const taskCard = document.createElement('div');
        taskCard.className = 'task-card';
        taskCard.innerHTML = `
            <div class="task-header">
                <h3>Задание <span class="task-number">${taskNumber}</span></h3>
                <button class="btn btn-danger btn-remove-task">Удалить</button>
            </div>
            <textarea class="task-question">${question}</textarea>
            <div class="answer-section">
                <label>Формула ответа:</label>
                <textarea class="task-answer">${answer}</textarea>
            </div>
            <div class="teacher-preview hidden">
                <h4>Пример для учителя:</h4>
                <div class="preview-content">
                    <p><strong>Пример задания:</strong> <span class="preview-question"></span></p>
                    <p><strong>Правильный ответ:</strong> <span class="preview-answer"></span></p>
                    <p><strong>Используемые параметры:</strong> <span class="preview-params"></span></p>
                </div>
                <button class="btn btn-small btn-generate-preview">Сгенерировать новый пример</button>
            </div>
            <button class="btn btn-small btn-show-preview">Показать пример</button>
        `;
        tasksContainer.appendChild(taskCard);
        
        // Если добавляем из шаблона, сразу показываем пример
        if (question && answer) {
            const previewBtn = taskCard.querySelector('.btn-show-preview');
            previewBtn.click();
        }
    }

    // Обновление нумерации заданий
    function updateTaskNumbers() {
        document.querySelectorAll('.task-card').forEach((card, index) => {
            card.querySelector('.task-number').textContent = index + 1;
        });
    }

    // Обработчики событий
    document.addEventListener('click', function(e) {
        // Показать/скрыть превью
        if (e.target.classList.contains('btn-show-preview')) {
            const taskCard = e.target.closest('.task-card');
            const preview = taskCard.querySelector('.teacher-preview');
            const isHidden = preview.classList.contains('hidden');
            
            if (isHidden) {
                updatePreview(taskCard);
                e.target.textContent = 'Скрыть пример';
            } else {
                preview.classList.add('hidden');
                e.target.textContent = 'Показать пример';
            }
        }
        
        // Сгенерировать новый пример
        if (e.target.classList.contains('btn-generate-preview')) {
            const taskCard = e.target.closest('.task-card');
            updatePreview(taskCard);
        }
    });

    // Удаление задания
    tasksContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('btn-remove-task')) {
            const taskCard = e.target.closest('.task-card');
            const taskId = taskCard.dataset.taskId;
            
            if (taskId) {
                fetch(`/teacher/delete_task/${taskId}`, {
                    method: 'DELETE'
                }).then(response => {
                    if (response.ok) {
                        taskCard.remove();
                        updateTaskNumbers();
                    }
                });
            } else {
                taskCard.remove();
                updateTaskNumbers();
            }
        }
    });

    // Сохранение урока
    saveLessonBtn.addEventListener('click', function() {
        const tasks = [];
        document.querySelectorAll('.task-card').forEach(taskCard => {
            tasks.push({
                id: taskCard.dataset.taskId || null,
                question: taskCard.querySelector('.task-question').value,
                answer: taskCard.querySelector('.task-answer').value,
                template_id: taskCard.dataset.templateId || null  // Добавляем template_id
            });
        });

        fetch(`/teacher/update_lesson/${lessonId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ tasks: tasks })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Изменения сохранены!');
                // Обновляем ID новых заданий
                data.tasks.forEach((task, index) => {
                    if (!tasks[index].id) {
                        document.querySelectorAll('.task-card')[index].dataset.taskId = task.id;
                    }
                });
            }
        });
    });

    // Добавление пустого задания
    addTaskBtn.addEventListener('click', function() {
        addTask();
    });
});
================================================================================
ФАЙЛ: static\js\manage_students.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const classSelect = document.getElementById('classSelect');
    const showStudentsBtn = document.getElementById('showStudentsBtn');
    const studentsTable = document.getElementById('studentsTable').querySelector('tbody');
    const currentClassSpan = document.getElementById('currentClass');
    const addStudentBtn = document.getElementById('addStudentBtn');

    // Загрузка списка учеников
    function loadStudents(classId) {
        fetch(`/teacher/get_students?class_id=${classId}`)
            .then(response => response.json())
            .then(data => {
                studentsTable.innerHTML = '';
                data.students.forEach(student => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${student.id}</td>
                        <td>${student.full_name}</td>
                        <td>${student.username}</td>
                        <td>
                            <button class="btn btn-danger btn-sm delete-student" data-id="${student.id}">Удалить</button>
                        </td>
                    `;
                    studentsTable.appendChild(row);
                });
                
                // Установка текущего класса
                const selectedOption = classSelect.options[classSelect.selectedIndex];
                currentClassSpan.textContent = selectedOption.text;
            });
    }

    // Показать учеников выбранного класса
    showStudentsBtn.addEventListener('click', function() {
        loadStudents(classSelect.value);
    });

    // Добавление нового ученика
    addStudentBtn.addEventListener('click', function() {
        const name = document.getElementById('newStudentName').value.trim();
        const login = document.getElementById('newStudentLogin').value.trim();
        const password = document.getElementById('newStudentPassword').value.trim();
        const classId = classSelect.value;

        if (!name || !login || !password) {
            alert('Заполните все поля');
            return;
        }

        fetch('/teacher/add_student', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                full_name: name,
                username: login,
                password: password,
                class_id: classId
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                loadStudents(classId);
                document.getElementById('newStudentName').value = '';
                document.getElementById('newStudentLogin').value = '';
                document.getElementById('newStudentPassword').value = '';
            } else {
                alert(data.error || 'Ошибка добавления');
            }
        });
    });

    // Удаление ученика
    studentsTable.addEventListener('click', function(e) {
        if (e.target.classList.contains('delete-student')) {
            if (confirm('Удалить этого ученика?')) {
                const studentId = e.target.dataset.id;
                fetch(`/teacher/delete_student/${studentId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadStudents(classSelect.value);
                    } else {
                        alert(data.error || 'Ошибка удаления');
                    }
                });
            }
        }
    });

    // Загрузить учеников первого класса по умолчанию
    if (classSelect.options.length > 0) {
        loadStudents(classSelect.value);
    }
});
================================================================================
ФАЙЛ: static\js\manage_tasks.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const addTextbookBtn = document.getElementById('addTextbookBtn');
    const addTextbookForm = document.getElementById('addTextbookForm');
    const saveTextbookBtn = document.getElementById('saveTextbookBtn');
    const cancelTextbookBtn = document.getElementById('cancelTextbookBtn');
    
    // Показать/скрыть форму добавления
    addTextbookBtn.addEventListener('click', function() {
        addTextbookForm.classList.remove('hidden');
        addTextbookBtn.classList.add('hidden');
    });
    
    cancelTextbookBtn.addEventListener('click', function() {
        addTextbookForm.classList.add('hidden');
        addTextbookBtn.classList.remove('hidden');
    });
    
    // Сохранение нового учебника
    saveTextbookBtn.addEventListener('click', function() {
        const title = document.getElementById('textbookTitle').value.trim();
        const description = document.getElementById('textbookDescription').value.trim();
        const grade = document.getElementById('textbookGrade').value;
        
        if (!title) {
            alert('Введите название учебника');
            return;
        }
        
        fetch('/teacher/add_textbook', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                title: title,
                description: description,
                grade: grade
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert(data.error || 'Ошибка при сохранении учебника');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Ошибка при сохранении учебника');
        });
    });
});
================================================================================
ФАЙЛ: static\js\math_editor.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const templateType = document.getElementById('templateType');
    const templateParams = document.getElementById('templateParams');
    const taskEditor = document.getElementById('taskEditor');
    const mathPreview = document.getElementById('mathPreview');
    
    // Загрузка шаблонов при выборе типа
    templateType.addEventListener('change', function() {
        if (this.value === 'custom') {
            templateParams.classList.add('hidden');
            taskEditor.value = '';
            updatePreview();
            return;
        }
        
        fetch(`/get_math_templates?type=${this.value}`)
            .then(response => response.json())
            .then(templates => {
                renderTemplateParams(templates[0]); // Берем первый подходящий шаблон
            });
    });
    
    // Кнопки математического редактора
    document.querySelectorAll('.btn-math').forEach(btn => {
        btn.addEventListener('click', function() {
            insertAtCursor(taskEditor, this.dataset.insert);
        });
    });
    
    // Обновление превью при изменении
    taskEditor.addEventListener('input', updatePreview);
    
    function renderTemplateParams(template) {
        templateParams.innerHTML = '';
        const params = JSON.parse(template.parameters);
        
        for (const [param, config] of Object.entries(params)) {
            const paramDiv = document.createElement('div');
            paramDiv.className = 'param-group';
            
            const label = document.createElement('label');
            label.textContent = `Параметр ${param}:`;
            
            let input;
            if (config.type === 'int' || config.type === 'float') {
                input = document.createElement('input');
                input.type = 'number';
                input.step = config.step || 1;
                input.min = config.min;
                input.max = config.max;
                input.value = config.default || config.min;
                input.className = 'param-input';
                input.dataset.param = param;
            } else if (config.type === 'choice') {
                input = document.createElement('select');
                input.className = 'param-select';
                input.dataset.param = param;
                config.values.forEach(value => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = value;
                    input.appendChild(option);
                });
            }
            
            paramDiv.appendChild(label);
            paramDiv.appendChild(input);
            templateParams.appendChild(paramDiv);
        }
        
        templateParams.classList.remove('hidden');
        taskEditor.value = template.template;
        updatePreview();
    }
    
    function insertAtCursor(field, value) {
        const startPos = field.selectionStart;
        const endPos = field.selectionEnd;
        const cursorPos = startPos;
        const beforeText = field.value.substring(0, startPos);
        const afterText = field.value.substring(endPos, field.value.length);
        
        field.value = beforeText + value + afterText;
        field.selectionStart = cursorPos + value.indexOf('}') + 1;
        field.selectionEnd = field.selectionStart;
        field.focus();
        
        updatePreview();
    }
    
    function updatePreview() {
        // Здесь можно подключить библиотеку MathJax или KaTeX для рендеринга
        mathPreview.textContent = taskEditor.value;
    }
});
================================================================================
ФАЙЛ: static\js\student_lesson.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const lessonId = window.location.pathname.split('/').pop();
    let completedTasks = 0;
    
    // Функция для отображения результата
    function showResult(taskCard, isCorrect, evaluatedAnswer = null) {
    const feedback = taskCard.querySelector('.task-feedback');
    const correctFeedback = taskCard.querySelector('.feedback-correct');
    const incorrectFeedback = taskCard.querySelector('.feedback-incorrect');
    const status = taskCard.querySelector('.task-status');
    
    if (!feedback || !correctFeedback || !incorrectFeedback || !status) {
        console.error('Не найдены необходимые элементы DOM');
        return;
    }
    
    if (isCorrect) {
        correctFeedback.classList.remove('hidden');
        incorrectFeedback.classList.add('hidden');
        status.style.backgroundColor = 'var(--success-color)';
        completedTasks++;
    } else {
        correctFeedback.classList.add('hidden');
        incorrectFeedback.classList.remove('hidden');
        if (evaluatedAnswer) {
            const userAnswerElement = incorrectFeedback.querySelector('.user-answer');
            if (userAnswerElement) {
                userAnswerElement.textContent = `Ваш ответ: ${evaluatedAnswer}`;
            }
        }
        status.style.backgroundColor = 'var(--error-color)';
    }
    
    feedback.classList.remove('hidden');
    taskCard.querySelector('.answer-input').disabled = true;
    taskCard.querySelector('.btn-check').disabled = true;
    updateProgress();
}
    
    // Новая функция проверки ответа через API
    async function checkAnswer(taskCard) {
    const taskId = taskCard.dataset.taskId;
    const userAnswer = taskCard.querySelector('.answer-input').value.trim();
    const correctAnswer = taskCard.querySelector('.correct-answer').textContent;
    const params = JSON.parse(taskCard.dataset.params || '{}');
    
    try {
        const response = await fetch('/api/check_answer', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                task_id: taskId,
                answer: userAnswer,
                correct_answer: correctAnswer,
                params: params
            })
        });
        
        if (!response.ok) {
            throw new Error('Ошибка сервера');
        }
        
        const result = await response.json();
        
        if (result.error) {
            throw new Error(result.error);
        }
        
        showResult(taskCard, result.is_correct, result.evaluated_answer);
        await saveAnswerToServer(taskId, userAnswer, result.is_correct);
    } catch (error) {
        console.error('Error:', error);
        alert('Произошла ошибка при проверке ответа: ' + error.message);
    }
}
    
    // Сохранение ответа на сервере
    async function saveAnswerToServer(taskId, answer, isCorrect) {
        try {
            await fetch('/save_answer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    task_id: taskId,
                    answer: answer,
                    is_correct: isCorrect
                })
            });
        } catch (error) {
            console.error('Ошибка сохранения:', error);
        }
    }
    
    // Остальной код остаётся без изменений
    document.querySelectorAll('.btn-check').forEach(button => {
        button.addEventListener('click', function() {
            checkAnswer(this.closest('.task-card'));
        });
    });
    
    // Обновление прогресса
    function updateProgress() {
        const progressFill = document.querySelector('.progress-fill');
        const progressText = document.querySelector('.progress-text');
        const totalTasks = document.querySelectorAll('.task-card').length;
        const percentage = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
        
        progressFill.style.width = `${percentage}%`;
        progressText.textContent = `${completedTasks} из ${totalTasks} заданий`;
    }
});
================================================================================
ФАЙЛ: static\js\teacher.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    // Элементы интерфейса
    const gradeButtons = document.querySelectorAll('.btn-grade');
    const letterButtons = document.querySelector('.letter-buttons');
    const createBtn = document.getElementById('createNewLesson');
    const modal = document.getElementById('lessonModal');
    const closeBtn = document.querySelector('.close');
    const saveLessonBtn = document.getElementById('saveLesson');
    
    let selectedGrade = null;
    let selectedLetter = null;

    // 1. Выбор класса (5-11)
    gradeButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            gradeButtons.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            selectedGrade = this.dataset.grade;
            letterButtons.classList.remove('hidden');
            createBtn.classList.add('hidden');
        });
    });

    // 2. Выбор буквы класса (А-Д)
    document.querySelectorAll('.btn-letter').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.btn-letter').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            selectedLetter = this.dataset.letter;
            createBtn.classList.remove('hidden');
            loadLessons(selectedGrade, selectedLetter);
        });
    });

    // 3. Открытие модального окна
    createBtn.addEventListener('click', function() {
        // Устанавливаем сегодняшнюю дату по умолчанию
        document.getElementById('lessonDate').value = new Date().toISOString().split('T')[0];
        modal.classList.remove('hidden');
    });

    // 4. Закрытие модального окна
    function closeModal() {
        modal.classList.add('hidden');
    }
    
    closeBtn.addEventListener('click', closeModal);
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            closeModal();
        }
    });

    // 5. Сохранение урока
    saveLessonBtn.addEventListener('click', async function() {
        const title = document.getElementById('lessonTitle').value.trim();
        const date = document.getElementById('lessonDate').value;
        
        if (!title) {
            alert('Введите название урока');
            return;
        }

        try {
            const response = await fetch('/teacher/create_lesson', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    grade: `${selectedGrade}${selectedLetter}`,
                    title: title,
                    date: date
                })
            });

            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error || 'Ошибка сервера');
            }

            if (data.success && data.lesson_id) {
                // Перенаправляем на страницу редактирования
                window.location.href = `/teacher/edit_lesson/${data.lesson_id}`;
            } else {
                throw new Error('Не удалось создать урок');
            }
        } catch (error) {
            console.error('Error:', error);
            alert(`Ошибка создания урока: ${error.message}`);
        }
    });

    // Функция для загрузки уроков класса
    async function loadLessons(grade, letter) {
        try {
            const response = await fetch(`/teacher/get_lessons?grade=${grade}${letter}`);
            const data = await response.json();
            
            if (response.status !== 200) {
                throw new Error(data.error || 'Ошибка загрузки уроков');
            }
            
            const container = document.querySelector('.lessons-container');
            container.innerHTML = '';
            
            if (!data.lessons || data.lessons.length === 0) {
                container.innerHTML = '<p>Нет созданных уроков</p>';
                return;
            }
            
            data.lessons.forEach(lesson => {
                const lessonElement = document.createElement('div');
                lessonElement.className = 'lesson-card';
                lessonElement.innerHTML = `
                    <div class="lesson-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                        </svg>
                    </div>
                    <div class="lesson-info">
                        <h4>${lesson.title}</h4>
                        <p>${lesson.date}</p>
                    </div>
                    <div class="lesson-actions">
                        <a href="/teacher/conduct_lesson/${lesson.id}" class="btn btn-small">Войти в урок</a>
                        <a href="/teacher/edit_lesson/${lesson.id}" class="btn btn-small btn-secondary">Редактировать</a>
                    </div>
                `;
                container.appendChild(lessonElement);
            });
            
            document.querySelector('.lessons-list').classList.remove('hidden');
        } catch (error) {
            console.error('Error loading lessons:', error);
            alert(`Ошибка загрузки уроков: ${error.message}`);
        }
    }
});
================================================================================
ФАЙЛ: static\js\teacher_create_lesson.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    // Элементы
    const tasksContainer = document.getElementById('tasksContainer');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const saveLessonBtn = document.getElementById('saveLessonBtn');
    const previewLessonBtn = document.getElementById('previewLessonBtn');
    const generateWithAIBtn = document.getElementById('generateWithAI');
    const aiPrompt = document.getElementById('aiPrompt');
    const aiResults = document.getElementById('aiResults');
    const aiTasksList = document.getElementById('aiTasksList');
    const addAiTasksBtn = document.getElementById('addAiTasks');
    const taskTemplate = document.getElementById('taskTemplate');

    // Добавление нового задания
    function addTask(taskText = '') {
        const taskClone = taskTemplate.content.cloneNode(true);
        const taskElement = taskClone.querySelector('.task-card');
        const taskNumber = tasksContainer.children.length + 1;
        
        taskClone.querySelector('.task-number').textContent = taskNumber;
        if (taskText) {
            taskClone.querySelector('.task-text').value = taskText;
        }
        
        // Кнопка удаления
        taskClone.querySelector('.btn-remove-task').addEventListener('click', function() {
            tasksContainer.removeChild(taskElement);
            updateTaskNumbers();
        });
        
        // Превью примеров
        taskClone.querySelector('.btn-preview-task').addEventListener('click', function() {
            const previewDiv = taskElement.querySelector('.task-preview');
            previewDiv.classList.toggle('hidden');
            
            if (!previewDiv.classList.contains('hidden')) {
                generateExamples(taskElement);
            }
        });
        
        tasksContainer.appendChild(taskClone);
    }

    // Обновление нумерации заданий
    function updateTaskNumbers() {
        Array.from(tasksContainer.children).forEach((task, index) => {
            task.querySelector('.task-number').textContent = index + 1;
        });
    }

    // Генерация примеров для задания
    function generateExamples(taskElement) {
        const taskText = taskElement.querySelector('.task-text').value;
        const examplesDiv = taskElement.querySelector('.preview-examples');
        examplesDiv.innerHTML = '';
        
        if (!taskText) return;
        
        // Находим параметры {A}, {B}...
        const params = [...new Set(taskText.match(/\{([A-Z])\}/g))].map(p => p.replace(/\{|\}/g, ''));
        
        // Генерируем 3 примера
        for (let i = 0; i < 3; i++) {
            const example = { ...taskText };
            const values = {};
            
            // Заполняем параметры случайными значениями
            params.forEach(param => {
                values[param] = getRandomInt(1, 10);
                example = example.replace(new RegExp(`\\{${param}\\}`, 'g'), values[param]);
            });
            
            const exampleDiv = document.createElement('div');
            exampleDiv.className = 'example';
            exampleDiv.textContent = example;
            examplesDiv.appendChild(exampleDiv);
        }
    }

    // Генерация через DeepSeek
    generateWithAIBtn.addEventListener('click', async function() {
        if (!aiPrompt.value.trim()) {
            alert('Введите описание заданий');
            return;
        }
        
        generateWithAIBtn.disabled = true;
        generateWithAIBtn.textContent = 'Генерация...';
        
        try {
            const response = await fetch('/teacher/generate_with_ai', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: aiPrompt.value })
            });
            
            const data = await response.json();
            displayAITasks(data.tasks);
        } catch (error) {
            console.error('AI generation error:', error);
            alert('Ошибка генерации');
        } finally {
            generateWithAIBtn.disabled = false;
            generateWithAIBtn.textContent = 'Сгенерировать задания';
        }
    });

    // Отображение результатов ИИ
    function displayAITasks(tasks) {
        aiTasksList.innerHTML = '';
        tasks.forEach(task => {
            const taskDiv = document.createElement('div');
            taskDiv.className = 'ai-task';
            taskDiv.innerHTML = `
                <input type="checkbox" checked>
                <div class="ai-task-text">${task}</div>
            `;
            aiTasksList.appendChild(taskDiv);
        });
        aiResults.classList.remove('hidden');
    }

    // Добавление выбранных заданий от ИИ
    addAiTasksBtn.addEventListener('click', function() {
        document.querySelectorAll('.ai-task input:checked').forEach(checkbox => {
            const taskText = checkbox.nextElementSibling.textContent;
            addTask(taskText);
        });
        aiResults.classList.add('hidden');
    });

    // Сохранение урока
    saveLessonBtn.addEventListener('click', function() {
        const tasks = [];
        document.querySelectorAll('.task-card').forEach(task => {
            tasks.push({
                text: task.querySelector('.task-text').value,
                params: [...new Set(task.querySelector('.task-text').value.match(/\{([A-Z])\}/g))]
                    .map(p => p.replace(/\{|\}/g, ''))
            });
        });
        
        if (tasks.length === 0) {
            alert('Добавьте хотя бы одно задание');
            return;
        }
        
        fetch('/teacher/save_lesson', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                class_name: '{{ class_name }}',
                tasks: tasks
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.href = '/teacher/dashboard';
            } else {
                alert('Ошибка сохранения: ' + (data.error || ''));
            }
        });
    });

    // Вспомогательные функции
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // Инициализация
    addTaskBtn.addEventListener('click', () => addTask());
    addTask(); // Добавляем первое задание по умолчанию
});
================================================================================
ФАЙЛ: static\js\textbook_tasks.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    // Конфигурация
    const textbookId = document.querySelector('.textbook-tasks-container').dataset.textbookId;
    const API_BASE = '/api';
    const TEXTS = {
        deleteConfirm: 'Удалить этот шаблон задания?',
        saveSuccess: 'Шаблон успешно сохранён',
        deleteSuccess: 'Шаблон удалён'
    };

    // Элементы
    const elements = {
        showFormBtn: document.getElementById('showFormBtn'),
        taskForm: document.getElementById('taskForm'),
        cancelBtn: document.getElementById('cancelBtn'),
        saveBtn: document.getElementById('saveTemplateBtn'),
        templatesList: document.getElementById('templatesList'),
        formTitle: document.querySelector('#taskForm h3'),
        templateName: document.getElementById('templateName'),
        questionTemplate: document.getElementById('questionTemplate'),
        answerTemplate: document.getElementById('answerTemplate'),
        paramsContainer: document.getElementById('paramsContainer')
    };

    // Текущее состояние
    let state = {
        currentTemplateId: null,
        isEditing: false
    };

    // ===== ОСНОВНЫЕ ФУНКЦИИ =====
    function toggleForm(show = true) {
        elements.taskForm.classList.toggle('hidden', !show);
        if (show) {
            elements.formTitle.textContent = state.isEditing 
                ? 'Редактирование шаблона' 
                : 'Новый шаблон задания';
        }
    }

    function resetForm() {
        elements.templateName.value = '';
        elements.questionTemplate.value = '';
        elements.answerTemplate.value = '';
        elements.paramsContainer.innerHTML = '';
        state.currentTemplateId = null;
        state.isEditing = false;
    }

    function updateParameters() {
        const question = elements.questionTemplate.value;
        const answer = elements.answerTemplate.value;
        elements.paramsContainer.innerHTML = '';

        const params = new Set();
        const regex = /\{([A-Za-z]+)\}/g;
        let match;
        
        while ((match = regex.exec(question))) params.add(match[1]);
        while ((match = regex.exec(answer))) params.add(match[1]);

        params.forEach(param => {
        const group = document.createElement('div');
        group.className = 'param-group';
        group.innerHTML = `
            <h4>Параметр ${param}</h4>
            <div class="param-row">
                <label>Тип:
                    <select class="param-type">
                        <option value="int">Целое число</option>
                        <option value="float">Дробное число</option>
                    </select>
                </label>
                <label>Минимум: <input type="number" class="param-min" value="1" min="0"></label>
                <label>Максимум: <input type="number" class="param-max" value="10" min="1"></label>
            </div>
            <div class="param-constraints">
                <button class="btn btn-small add-constraint">+ Добавить условие</button>
            </div>
        `;
        elements.paramsContainer.appendChild(group);
    });
    
    // Обработчик для добавления условий
        document.querySelectorAll('.add-constraint').forEach(btn => {
            btn.addEventListener('click', function() {
                const constraintsContainer = this.closest('.param-group').querySelector('.param-constraints');
                const constraintDiv = document.createElement('div');
                constraintDiv.className = 'constraint';
                constraintDiv.innerHTML = `
                    <select class="constraint-type">
                        <option value="multiple_of">Кратно</option>
                        <option value="greater_than">Больше чем</option>
                        <option value="less_than">Меньше чем</option>
                        <option value="equals">Равно</option>
                    </select>
                    <input type="text" class="constraint-value" placeholder="Значение или параметр">
                    <button class="btn-icon remove-constraint">×</button>
                `;
                constraintsContainer.insertBefore(constraintDiv, this);
            });
        });
        }

    async function saveTemplate() {
        const name = elements.templateName.value.trim();
        const question = elements.questionTemplate.value.trim();
        const answer = elements.questionTemplate.value.trim();

        if (!name || !question || !answer) {
            alert('Заполните все обязательные поля');
            return;
        }

        // Собираем параметры
        const params = {};
        const paramGroups = elements.paramsContainer.querySelectorAll('.param-group');
        
        for (const group of paramGroups) {
            const param = group.querySelector('h4').textContent.replace('Параметр ', '');
            const min = parseInt(group.querySelector('.param-min').value);
            const max = parseInt(group.querySelector('.param-max').value);
            
            if (min >= max) {
                alert(`Для параметра ${param} максимум должен быть больше минимума`);
                return;
            }
            
            params[param] = { min, max };
        }

        try {
            const url = state.isEditing 
                ? `${API_BASE}/templates/${state.currentTemplateId}`
                : `${API_BASE}/templates`;

            const method = state.isEditing ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    textbook_id: textbookId,
                    name: name,
                    question: question,
                    answer: answer,
                    parameters: params
                })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Ошибка сервера');
            }

            alert(TEXTS.saveSuccess);
            resetForm();
            toggleForm(false);
            loadTemplates(); // Перезагружаем список
        } catch (error) {
            console.error('Ошибка сохранения:', error);
            alert(`Ошибка: ${error.message}`);
        }
    }

    async function loadTemplates() {
        try {
            const response = await fetch(`/api/textbooks/${textbookId}/templates`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            renderTemplates(data.templates);
        } catch (error) {
            console.error('Ошибка загрузки:', error);
            // Добавьте отладочную информацию
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = `Ошибка загрузки шаблонов: ${error.message}`;
            elements.templatesList.appendChild(errorDiv);
        }
    }

    function renderTemplates(templates) {
        elements.templatesList.innerHTML = templates.length 
            ? templates.map((template, index) => `
                <div class="template-card" data-id="${template.id}">
                     <input type="checkbox" class="template-checkbox" data-id="${template.id}">
                    <div class="template-header">
                        <h3>№${index + 1}: ${template.name}</h3>
                        <div class="template-actions">
                            <button class="btn-icon edit-btn">✏️</button>
                            <button class="btn-icon delete-btn">🗑️</button>
                        </div>
                    </div>
                    <div class="template-content">
                        <p><strong>Вопрос:</strong> ${template.question_template}</p>
                        <p><strong>Ответ:</strong> ${template.answer_template}</p>
                    </div>
                </div>
            `).join('')
            : '<p class="no-templates">Нет созданных шаблонов</p>';
    }

    async function deleteTemplate(templateId) {
        if (!confirm(TEXTS.deleteConfirm)) return;

        try {
            const response = await fetch(`${API_BASE}/templates/${templateId}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Ошибка удаления');
            }

            alert(TEXTS.deleteSuccess);
            loadTemplates(); // Перезагружаем список
        } catch (error) {
            console.error('Ошибка удаления:', error);
            alert(`Ошибка удаления: ${error.message}`);
        }
    }

    function setupEditTemplate(templateId) {
        // В реальном приложении нужно загрузить данные шаблона
        // Для примера просто переключаем в режим редактирования
        state.currentTemplateId = templateId;
        state.isEditing = true;
        toggleForm(true);
    }

    // ===== ИНИЦИАЛИЗАЦИЯ =====
    function initEventListeners() {
        elements.showFormBtn.addEventListener('click', () => {
            resetForm();
            toggleForm(true);
        });

        elements.cancelBtn.addEventListener('click', () => toggleForm(false));
        elements.saveBtn.addEventListener('click', saveTemplate);
        elements.questionTemplate.addEventListener('input', updateParameters);
        elements.answerTemplate.addEventListener('input', updateParameters);

        // Делегирование событий для списка
        elements.templatesList.addEventListener('click', (e) => {
            const card = e.target.closest('.template-card');
            if (!card) return;

            const templateId = parseInt(card.dataset.id);

            if (e.target.classList.contains('delete-btn')) {
                deleteTemplate(templateId);
            } else if (e.target.classList.contains('edit-btn')) {
                setupEditTemplate(templateId);
            }
        });
    }

    // Запуск приложения
    function init() {
        initEventListeners();
        loadTemplates();
        console.log('Textbook tasks module initialized');
    }

    init();
});
================================================================================
ФАЙЛ: templates\auth.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Платформа урока. СОШ №62 - Авторизация</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="auth-logo">
                <h1>Платформа урока. СОШ №62</h1>
                <p>Система интерактивного обучения математике</p>
            </div>
            
            <form id="loginForm" method="POST" action="{{ url_for('login') }}">
                {% if error %}
                <div class="alert alert-error">{{ error }}</div>
                {% endif %}
                
                <div class="form-group">
                    <label for="username">Имя пользователя</label>
                    <input type="text" id="username" name="username" required>
                </div>
                
                <div class="form-group">
                    <label for="password">Пароль</label>
                    <input type="password" id="password" name="password" required>
                </div>
                
                <button type="submit" class="btn btn-primary">Войти</button>
            </form>
            
            <div class="auth-footer">
                <p>Нет аккаунта? Обратитесь к администратору</p>
            </div>
        </div>
    </div>
    
    <script src="{{ url_for('static', filename='js/auth.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\conduct_lesson.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Проведение урока | {{ lesson.title }}</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/teacher_dashboard.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Проведение урока: {{ lesson.title }}</h1>
            </div>
            <div class="header-right">
                <span class="class-info">{{ lesson.grade }}{{ lesson.letter }} класс</span>
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="conduct-lesson-container">
            <div class="real-time-results">
                <h2>Результаты класса</h2>
                <div class="results-table-container">
                    <table class="results-table">
                        <thead>
                            <tr>
                                <th>Ученик</th>
                                {% for task in tasks %}
                                <th>Задание {{ loop.index }}</th>
                                {% endfor %}
                                <th>Прогресс</th>
                            </tr>
                        </thead>
                        <tbody id="studentsResults">
                            {% for student in students %}
                            <tr data-student-id="{{ student.id }}">
                                <td>{{ student.full_name }}</td>
                                {% for task in tasks %}
                                <td data-task-id="{{ task.id }}">
                                    <span class="pending">—</span>
                                </td>
                                {% endfor %}
                                <td>
                                    <div class="progress-container">
                                        <div class="progress-bar" style="width: 0%"></div>
                                        <span>0%</span>
                                    </div>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="lesson-controls">
                <button id="refreshResults" class="btn btn-primary">Обновить результаты</button>
                <button id="endLesson" class="btn btn-danger">Завершить урок</button>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/conduct_lesson.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\edit_lesson.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Редактирование урока | {{ lesson.title }}</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/edit_lesson.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Редактирование урока: {{ lesson.title }}</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="edit-lesson-container">
            <!-- Боковая панель с учебниками и заданиями -->
            <aside class="textbook-sidebar">
                <div class="sidebar-header">
                    <h3>Задания из учебников</h3>
                    <select id="textbookSelect" class="form-control">
                        <option value="">Выберите учебник...</option>
                        {% for textbook in textbooks %}
                        <option value="{{ textbook.id }}">{{ textbook.title }} ({{ textbook.grade }} класс)</option>
                        {% endfor %}
                    </select>
                    <input type="text" id="templateSearch" placeholder="Поиск заданий..." class="form-control">
                </div>
                
                <div class="templates-list" id="templatesList">
                    <!-- Список заданий будет загружаться здесь -->
                    <div class="empty-state">
                        <p>Выберите учебник для просмотра заданий</p>
                    </div>
                </div>
            </aside>

            <!-- Основная область редактирования -->
            <div class="lesson-edit-area">
                <div class="lesson-meta">
                    <h3>Класс: {{ lesson.grade }}{{ lesson.letter }}</h3>
                    <p>Дата проведения: {{ lesson.date }}</p>
                </div>

                <div class="tasks-section">
                    <h2>Задания урока</h2>
                    <div id="tasksContainer">
                        {% for task in tasks %}
                        <div class="task-card" data-task-id="{{ task.id }}">
                            <div class="task-header">
                                <h3>Задание <span class="task-number">{{ loop.index }}</span></h3>
                                <button class="btn btn-danger btn-remove-task">Удалить</button>
                            </div>
                            <textarea class="task-question">{{ task.question }}</textarea>
                            <div class="answer-section">
                                <label>Формула ответа:</label>
                                <textarea class="task-answer">{{ task.answer }}</textarea>
                            </div>
                            <div class="teacher-preview hidden">
                                <h4>Пример для учителя:</h4>
                                <div class="preview-content">
                                    <p><strong>Пример задания:</strong> <span class="preview-question"></span></p>
                                    <p><strong>Правильный ответ:</strong> <span class="preview-answer"></span></p>
                                    <p><strong>Используемые параметры:</strong> <span class="preview-params"></span></p>
                                </div>
                                <button class="btn btn-small btn-generate-preview">Сгенерировать новый пример</button>
                            </div>
                            <button class="btn btn-small btn-show-preview">Показать пример</button>
                        </div>
                        {% endfor %}
                    </div>
                    <button id="addTaskBtn" class="btn btn-primary">+ Добавить задание</button>
                </div>

                <div class="save-actions">
                    <button id="saveLessonBtn" class="btn btn-save">Сохранить урок</button>
                </div>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/edit_lesson.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\manage_students.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Управление учениками</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Управление учениками</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="manage-students-container">
            <div class="class-selection">
                <h3>Выберите класс:</h3>
                <select id="classSelect" class="form-control">
                    {% for class in classes %}
                    <option value="{{ class.id }}">{{ class.grade }}{{ class.letter }}</option>
                    {% endfor %}
                </select>
                <button id="showStudentsBtn" class="btn btn-primary">Показать учеников</button>
            </div>

            <div class="students-list">
                <h3>Ученики класса <span id="currentClass"></span></h3>
                <table id="studentsTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>ФИО</th>
                            <th>Логин</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                
                <div class="add-student-form">
                    <h4>Добавить нового ученика:</h4>
                    <input type="text" id="newStudentName" placeholder="ФИО" class="form-control">
                    <input type="text" id="newStudentLogin" placeholder="Логин" class="form-control">
                    <input type="password" id="newStudentPassword" placeholder="Пароль" class="form-control">
                    <button id="addStudentBtn" class="btn btn-primary">Добавить</button>
                </div>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/manage_students.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\manage_tasks.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Управление заданиями</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Управление заданиями</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="manage-tasks-container">
            <div class="textbooks-section">
                <div class="section-header">
                    <h2>Доступные учебники</h2>
                    <button id="addTextbookBtn" class="btn btn-primary">+ Добавить учебник</button>
                </div>
                
                <div id="addTextbookForm" class="add-form hidden">
                    <div class="form-group">
                        <label>Название учебника:</label>
                        <input type="text" id="textbookTitle" class="form-control">
                    </div>
                    <div class="form-group">
                        <label>Описание:</label>
                        <input type="text" id="textbookDescription" class="form-control">
                    </div>
                    <div class="form-group">
                        <label>Класс:</label>
                        <select id="textbookGrade" class="form-control">
                            {% for grade in range(5, 12) %}
                            <option value="{{ grade }}">{{ grade }} класс</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="form-actions">
                        <button id="saveTextbookBtn" class="btn btn-primary">Сохранить</button>
                        <button id="cancelTextbookBtn" class="btn btn-secondary">Отмена</button>
                    </div>
                </div>
                
                <div class="textbooks-grid">
                    {% for textbook in textbooks %}
                    <div class="textbook-card">
                        <div class="textbook-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                            </svg>
                        </div>
                        <h3>{{ textbook.title }} ({{ textbook.grade }} класс)</h3>
                        <p>{{ textbook.description }}</p>
                        <a href="{{ url_for('textbook_tasks', textbook_id=textbook.id) }}" class="btn btn-primary">Открыть задания</a>
                    </div>
                    {% else %}
                    <div class="no-textbooks">
                        <p>Нет доступных учебников</p>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/manage_tasks.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\student_dashboard.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Панель ученика - Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Math Teaching System</h1>
            </div>
            <div class="header-right">
                <span class="user-greeting">Здравствуйте, {{ full_name }}</span>
                <a href="{{ url_for('logout') }}" class="btn btn-logout">Выйти</a>
            </div>
        </header>
        
        <main class="dashboard-main">
            <div class="welcome-section">
                <h2>Выберите предмет для работы</h2>
                <p>Решайте задачи вместе с классом, анализируйте решения у доски и применяйте к своим примерам</p>
            </div>
            
            <div class="subjects-grid">
                <div class="subject-card">
                    <div class="subject-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                        </svg>
                    </div>
                    <h3>Мои уроки</h3>
                    <p>Все доступные уроки вашего класса</p>
                    <a href="{{ url_for('student_lessons') }}" class="btn btn-subject">Открыть</a>
                </div>
                
                {% for subject in subjects %}
                <div class="subject-card">
                    <div class="subject-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                        </svg>
                    </div>
                    <h3>{{ subject['name'] }}</h3>
                    <p>{{ subject['description'] }}</p>
                    <a href="#" class="btn btn-subject">Выбрать</a>
                </div>
                {% endfor %}
            </div>
        </main>
    </div>
</body>
</html>
================================================================================
ФАЙЛ: templates\student_lesson.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ lesson.title }} | Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/lesson.css') }}" rel="stylesheet">
</head>
<body>
    <div class="lesson-container">
        <header class="lesson-header">
            <div class="header-content">
                <h1>{{ lesson.title }}</h1>
                <div class="lesson-meta">
                    <span class="date">{{ lesson.date }}</span>
                    <span class="teacher">Учитель: {{ lesson.teacher_name }}</span>
                </div>
            </div>
            <a href="{{ url_for('student_lessons') }}" class="btn btn-back">← Назад к урокам</a>
        </header>

        <main class="lesson-content">
            <div class="tasks-container">
                {% for task in tasks %}
                <div class="task-card" data-task-id="{{ task.id }}" data-user-id="{{ user_id }}">
                    <div class="task-header">
                        <div class="task-number">Задание {{ loop.index }}</div>
                        <div class="task-status"></div>
                    </div>
                    <div class="task-body">
                        <div class="task-question">
                            {{ task.question|safe }}
                        </div>
                        <div class="task-answer">
                            <input type="text" class="answer-input" placeholder="Введите ваш ответ">
                            <button class="btn btn-check">Проверить</button>
                        </div>
                        <div class="task-feedback hidden">
                            <div class="feedback-correct hidden">
                                <span class="icon">✓</span>
                                <span>Правильно!</span>
                            </div>
                            <div class="feedback-incorrect hidden">
                                <span class="icon">✗</span>
                                <span>Ошибка! Правильный ответ: <span class="correct-answer">{{ task.correct_answer }}</span></span>
                                <button class="btn btn-hint">Показать решение</button>
                            </div>
                            <div class="task-hint hidden">
                                {{ task.answer|replace('*', '×')|replace('/', '÷') }}
                            </div>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>

            <div class="lesson-progress">
                <h3>Ваш прогресс</h3>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 0%"></div>
                </div>
                <div class="progress-text">0 из {{ tasks|length }} заданий</div>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/student_lesson.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\student_lessons.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Мои уроки | Math Teaching System</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Мои уроки</h1>
            </div>
            <div class="header-right">
                <span class="user-greeting">{{ full_name }}</span>
                <a href="{{ url_for('logout') }}" class="btn btn-logout">Выйти</a>
            </div>
        </header>

        <main class="dashboard-main">
            <div class="lessons-list">
                <h2>Доступные уроки</h2>
                <div class="lessons-container">
                    {% for lesson in lessons %}
                    <div class="lesson-card">
                        <div class="lesson-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                            </svg>
                        </div>
                        <div class="lesson-info">
                            <h3>{{ lesson.title }}</h3>
                            <p>Дата: {{ lesson.date }}</p>
                            <p>Учитель: {{ lesson.teacher_name }}</p>
                        </div>
                        <div class="lesson-actions">
                            <a href="{{ url_for('start_lesson', lesson_id=lesson.id) }}" class="btn btn-primary">Начать урок</a>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </main>
    </div>
</body>
</html>
================================================================================
ФАЙЛ: templates\teacher_create_lesson.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Создание урока | Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Создание урока для {{ class_name }}</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="create-lesson-container">
            <!-- Блок ручного создания -->
            <div class="manual-creation">
                <h2>Добавить задания</h2>
                <div id="tasksContainer">
                    <!-- Задания будут добавляться здесь -->
                </div>
                <button id="addTaskBtn" class="btn btn-primary">+ Добавить задание</button>
            </div>

            <!-- Блок генерации через ИИ -->
            <div class="ai-generation">
                <h2>Генерация через DeepSeek</h2>
                <textarea id="aiPrompt" placeholder="Опишите задание (например: '5 задач на дроби для 5 класса')"></textarea>
                <button id="generateWithAI" class="btn btn-ai">Сгенерировать задания</button>
                <div id="aiResults" class="hidden">
                    <h3>Результаты:</h3>
                    <div id="aiTasksList"></div>
                    <button id="addAiTasks" class="btn btn-primary">Добавить выбранные</button>
                </div>
            </div>

            <!-- Кнопки сохранения -->
            <div class="save-actions">
                <button id="saveLessonBtn" class="btn btn-save">Сохранить урок</button>
                <button id="previewLessonBtn" class="btn btn-secondary">Предпросмотр</button>
            </div>
        </main>
    </div>

    <!-- Шаблон задания -->
    <template id="taskTemplate">
        <div class="task-card">
            <div class="task-header">
                <h3>Задание <span class="task-number">1</span></h3>
                <button class="btn-remove-task">×</button>
            </div>
            <textarea class="task-text" placeholder="Введите текст задания (используйте {A}, {B}...):"></textarea>
            <div class="task-preview hidden">
                <h4>Примеры для учеников:</h4>
                <div class="preview-examples"></div>
            </div>
            <button class="btn-preview-task">Показать примеры</button>
        </div>
    </template>

    <script src="{{ url_for('static', filename='js/teacher_create_lesson.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\teacher_dashboard.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Панель учителя - Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Math Teaching System</h1>
            </div>
            <div class="header-right">
                <span class="user-greeting">Здравствуйте, {{ full_name }}</span>
                <a href="{{ url_for('logout') }}" class="btn btn-logout">Выйти</a>
            </div>
        </header>
        
        <main class="dashboard-main teacher-dashboard">
            <div class="welcome-section">
                <h2>Панель управления учителя</h2>
                <p>Здесь вы можете создавать задания и управлять уроками</p>
            </div>
            
            <div class="teacher-actions">
                <div class="action-card">
                    <h3>Управление учениками</h3>
                    <p>Добавляйте и удаляйте учеников, назначайте классы</p>
                    <a href="{{ url_for('manage_students') }}" class="btn btn-action">Управление учениками</a>
                </div>

                <div class="action-card">
                    <h3>Управление заданиями</h3>
                    <p>Создавайте и редактируйте задания из учебников</p>
                    <a href="{{ url_for('manage_tasks') }}" class="btn btn-action">Управление заданиями</a>
                </div>
            </div>
            
            <div class="class-selection">
                <h3>Выберите класс для работы:</h3>
                
                <div class="grade-buttons">
                    {% for grade in range(5, 12) %}
                        <button class="btn-grade" data-grade="{{ grade }}">{{ grade }} класс</button>
                    {% endfor %}
                </div>
                
                <div class="letter-buttons hidden">
                    <h4>Выберите букву класса:</h4>
                    {% for letter in ['А', 'Б', 'В', 'Г', 'Д'] %}
                        <button class="btn-letter" data-letter="{{ letter }}">{{ letter }}</button>
                    {% endfor %}
                </div>
                
                <button id="createNewLesson" class="btn btn-primary hidden">Создать новый урок</button>
            </div>

                
            <div class="lessons-list hidden">
                <h3>Созданные уроки</h3>
                <div class="lessons-container">
                    <!-- Уроки будут добавляться динамически -->
                </div>
            </div>

        </main>
    </div>

    <!-- Модальное окно создания урока -->
    <div id="lessonModal" class="modal hidden">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Создание нового урока</h2>
            
            <div class="form-group">
                <label for="lessonTitle">Название урока:</label>
                <input type="text" id="lessonTitle" placeholder="Введите название урока">
            </div>
            
            <div class="form-group">
                <label for="lessonDate">Дата урока:</label>
                <input type="date" id="lessonDate" value="{{ today_date }}">
            </div>
            
            <button id="saveLesson" class="btn btn-primary">Создать урок</button>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/teacher.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\textbook_tasks.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{{ textbook.title }} - Управление заданиями</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>{{ textbook.title }} ({{ textbook.grade }} класс)</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('manage_tasks') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="textbook-tasks-container" data-textbook-id="{{ textbook.id }}">
            <div class="section-header">
                <h2>Шаблоны заданий</h2>
                <button id="showFormBtn" class="btn btn-primary">+ Добавить шаблон</button>
            </div>
            <div class="bulk-actions">
                <button id="deleteSelectedBtn" class="btn btn-danger" disabled>Удалить выбранные</button>
                <button id="selectAllBtn" class="btn btn-secondary">Выбрать все</button>
            </div>

            <!-- Форма добавления -->
            <div id="taskForm" class="task-form hidden">
                <h3>Новый шаблон задания</h3>
                <div class="form-group">
                    <label>Название:</label>
                    <input type="text" id="templateName" class="form-control" required>
                </div>
                <div class="form-group">
                    <label>Шаблон вопроса:</label>
                    <textarea id="questionTemplate" class="form-control" required></textarea>
                    <small class="form-hint">Используйте {A}, {B} для параметров</small>
                </div>
                <div class="form-group">
                    <label>Формула ответа:</label>
                    <textarea id="answerTemplate" class="form-control" required></textarea>
                    <small class="form-hint">Пример: {A} + {B}</small>
                </div>
                <div id="paramsContainer" class="params-container"></div>
                <div class="form-actions">
                    <button id="saveTemplateBtn" class="btn btn-primary">Сохранить</button>
                    <button id="cancelBtn" class="btn btn-secondary">Отмена</button>
                </div>
            </div>

            <!-- Список шаблонов -->
            <div id="templatesList" class="templates-list">
                {% for template in templates %}
                <div class="template-card" data-id="{{ template.id }}">
                    <div class="template-header">
                        <h3>№{{ loop.index }}: {{ template.name }}</h3>
                        <div class="template-actions">
                            <input type="checkbox" class="template-checkbox" data-id="{{ template.id }}">
                            <button class="btn-icon edit-btn">✏️</button>
                            <button class="btn-icon delete-btn">🗑️</button>
                        </div>
                    </div>
                    <div class="template-content">
                        <p><strong>Вопрос:</strong> {{ template.question_template }}</p>
                        <p><strong>Ответ:</strong> {{ template.answer_template }}</p>
                    </div>
                </div>
                {% else %}
                <p class="no-templates">Нет созданных шаблонов</p>
                {% endfor %}
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/textbook_tasks.js') }}"></script>
    <script src="{{ url_for('static', filename='js/bulk_actions.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: utils\task_generator.py
================================================================================
# utils/task_generator.py
import random
import re
import json
from typing import Dict, Any, List, Tuple
from math_engine import MathEngine

class TaskGenerator:
    @staticmethod
    def generate_task_variant(template: dict) -> dict:
        """
        Генерирует вариант задания на основе шаблона
        """
        # Генерация параметров
        params = MathEngine.generate_parameters(template['parameters'])
        
        # Формирование вопроса
        question = template['question_template']
        for param, value in params.items():
            question = question.replace(f'{{{param}}}', str(value))
        
        # Вычисление ответа
        answer = MathEngine.evaluate_expression(template['answer_template'], params)
        
        return {
            'question': question,
            'correct_answer': answer,
            'params': params,
            'template_id': template.get('id')
        }

    @staticmethod
    def extract_parameters(template: str) -> List[str]:
        """Извлекает список параметров из шаблона"""
        return list(set(re.findall(r'\{([A-Za-z]+)\}', template)))

    @staticmethod
    def validate_template(template: dict) -> bool:
        """Проверяет корректность шаблона"""
        required_fields = ['question_template', 'answer_template', 'parameters']
        if not all(field in template for field in required_fields):
            return False
        
        try:
            # Проверка генерации хотя бы одного варианта
            variant = TaskGenerator.generate_task_variant(template)
            if variant['correct_answer'] is None:
                return False
            return True
        except:
            return False