
================================================================================
ФАЙЛ: app.py
================================================================================
from flask import Flask, render_template, request, redirect, url_for, session, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os, re, json, random
import datetime
from datetime import datetime as dt

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'

# Конфигурация БД
DATABASE = 'database.db'

def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    # Создаем таблицу классов
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS classes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            grade INTEGER NOT NULL,
            letter TEXT NOT NULL,
            UNIQUE(grade, letter))
    ''')

    # Создаем таблицу пользователей
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            role TEXT NOT NULL,
            full_name TEXT,
            class_id INTEGER REFERENCES classes(id),
            UNIQUE(username, class_id))
    ''')

    # Создаем таблицу уроков
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS lessons (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            teacher_id INTEGER REFERENCES users(id),
            class_id INTEGER REFERENCES classes(id),
            title TEXT NOT NULL,
            date TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
    ''')

    # Создаем таблицу заданий
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS lesson_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            lesson_id INTEGER REFERENCES lessons(id),
            question TEXT NOT NULL,
            answer TEXT NOT NULL)
    ''')

    # Создаем таблицу предметов
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subjects (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT)
    ''')

    # Создаем таблицу вариантов заданий
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS student_task_variants (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            lesson_id INTEGER REFERENCES lessons(id),
            user_id INTEGER REFERENCES users(id),
            task_id INTEGER REFERENCES lesson_tasks(id),
            variant_data TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(lesson_id, user_id, task_id))
    ''')

    # Создаем таблицу ответов учеников
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS student_answers (
            task_id INTEGER REFERENCES lesson_tasks(id),
            user_id INTEGER REFERENCES users(id),
            answer TEXT NOT NULL,
            is_correct BOOLEAN NOT NULL,
            answered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (task_id, user_id))
    ''')

    # Создаем таблицу учебников
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS textbooks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            grade INTEGER NOT NULL,
            UNIQUE(title, grade))
    ''')

    # Создаем таблицу шаблонов заданий
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS task_templates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            textbook_id INTEGER REFERENCES textbooks(id),
            name TEXT NOT NULL,
            question_template TEXT NOT NULL,
            answer_template TEXT NOT NULL,
            parameters TEXT NOT NULL,  
            UNIQUE(textbook_id, name))
    ''')

    # В функции init_db(), после создания таблиц:
    cursor.execute("SELECT COUNT(*) FROM textbooks")
    if cursor.fetchone()[0] == 0:
        # Добавляем тестовые учебники
        textbooks = [
            ('Макарычев', 'Алгебра для 5 класса', 5),
            ('Мордкович', 'Алгебра для 7-9 классов', 7),
            ('Атанасян', 'Геометрия 7-9 классы', 7)
        ]
        
        for title, description, grade in textbooks:
            cursor.execute(
                "INSERT INTO textbooks (title, description, grade) VALUES (?, ?, ?)",
                (title, description, grade)
            )
        
        conn.commit()
    # Добавляем тестовые данные
    try:
        cursor.execute("SELECT COUNT(*) FROM users")
        if cursor.fetchone()[0] == 0:
            # Тестовые классы
            for grade in [5, 6, 7, 8, 9, 10, 11]:
                for letter in ['А', 'Б', 'В', 'Г']:
                    cursor.execute(
                        "INSERT OR IGNORE INTO classes (grade, letter) VALUES (?, ?)",
                        (grade, letter)
                    )
            
            # Тестовый учитель
            cursor.execute(
                "INSERT INTO users (username, password, role, full_name) VALUES (?, ?, ?, ?)",
                ('teacher1', generate_password_hash('teacher123'), 'teacher', 'Иванова Мария Сергеевна')
            )
            
            # Тестовые ученики
            test_students = [
                ('student1', 'student123', '6В', 'Петров Петр'),
                ('student2', 'student123', '6В', 'Сидорова Анна'),
                ('student3', 'student123', '6Г', 'Кузнецов Алексей')
            ]
            
            for username, password, class_name, full_name in test_students:
                grade = int(class_name[:-1])
                letter = class_name[-1]
                
                # Получаем class_id перед использованием
                cursor.execute(
                    "SELECT id FROM classes WHERE grade = ? AND letter = ?",
                    (grade, letter)
                )
                class_row = cursor.fetchone()
                if class_row:
                    class_id = class_row[0]
                    
                    cursor.execute(
                        "INSERT INTO users (username, password, role, full_name, class_id) VALUES (?, ?, ?, ?, ?)",
                        (username, generate_password_hash(password), 'student', full_name, class_id)
                    )
            
            # Тестовый предмет
            cursor.execute(
                "INSERT INTO subjects (name, description) VALUES (?, ?)",
                ('Математика', 'Алгебра и геометрия 6 класс')
            )
            
            # Тестовый учебник
            cursor.execute(
                "INSERT INTO textbooks (title, description, grade) VALUES (?, ?, ?)",
                ('Макарычев', 'Алгебра для 5 класса', 5)
            )
            
            # Базовые шаблоны для учебника
            templates = [
                ('Сложение', '{A} + {B} = ?', '{A} + {B}', '{"A": {"min": 1, "max": 10}, "B": {"min": 1, "max": 10}}'),
                ('Вычитание', '{A} - {B} = ?', '{A} - {B}', '{"A": {"min": 1, "max": 20}, "B": {"min": 1, "max": 10}}'),
                ('Умножение', '{A} × {B} = ?', '{A} * {B}', '{"A": {"min": 1, "max": 10}, "B": {"min": 1, "max": 10}}'),
                ('Деление', '{A} ÷ {B} = ?', '{A} / {B}', '{"A": {"min": 1, "max": 50}, "B": {"min": 1, "max": 10}}'),
                ('Уравнение', 'Решите: {A}x + {B} = {C}', '({C} - {B}) / {A}', '{"A": {"min": 1, "max": 5}, "B": {"min": 1, "max": 20}, "C": {"min": 10, "max": 50}}')
            ]
            
            for name, question, answer, params in templates:
                cursor.execute(
                    "INSERT INTO task_templates (textbook_id, name, question_template, answer_template, parameters) VALUES (1, ?, ?, ?, ?)",
                    (name, question, answer, params)
                )
            
            conn.commit()
    except Exception as e:
        conn.rollback()
        print(f"Ошибка при инициализации БД: {e}")
    finally:
        conn.close()


def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def home():
    if 'user_id' in session:
        if session['role'] == 'student':
            return redirect(url_for('student_dashboard'))
        else:
            return redirect(url_for('teacher_dashboard'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        conn.close()
        
        if user and check_password_hash(user['password'], password):
            session['user_id'] = user['id']
            session['username'] = user['username']
            session['role'] = user['role']
            session['full_name'] = user['full_name']
            
            if user['role'] == 'student':
                return redirect(url_for('student_dashboard'))
            else:
                return redirect(url_for('teacher_dashboard'))
        else:
            return render_template('auth.html', error="Неверное имя пользователя или пароль")
    
    return render_template('auth.html')

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

@app.route('/student/dashboard')
def student_dashboard():
    if 'user_id' not in session or session['role'] != 'student':
        return redirect(url_for('login'))
    
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM subjects")
    subjects = cursor.fetchall()
    conn.close()
    
    return render_template('student_dashboard.html', 
                         full_name=session['full_name'],
                         subjects=subjects)

@app.route('/teacher/dashboard')
def teacher_dashboard():
    if 'user_id' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))
    
    return render_template('teacher_dashboard.html', 
                         full_name=session['full_name'])


@app.route('/teacher/get_lessons')
def get_lessons():
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    class_full = request.args.get('grade')  # Формат "6В"
    grade = class_full[:-1]  # "6"
    letter = class_full[-1]  # "В"
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Находим ID класса
        cursor.execute("SELECT id FROM classes WHERE grade = ? AND letter = ?", (grade, letter))
        class_id = cursor.fetchone()
        
        if not class_id:
            return jsonify({'lessons': []})
        
        # Получаем уроки для этого класса
        cursor.execute('''
            SELECT l.id, l.title, l.date 
            FROM lessons l
            WHERE l.class_id = ? AND l.teacher_id = ?
            ORDER BY l.date DESC
        ''', (class_id[0], session['user_id']))
        
        lessons = cursor.fetchall()
        return jsonify({
            'lessons': [dict(lesson) for lesson in lessons]
        })
    except Exception as e:
        print(f"Error: {e}")
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()

@app.route('/teacher/edit_lesson/<int:lesson_id>')
def edit_lesson(lesson_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))

    conn = get_db()
    try:
        # Получаем урок
        lesson = conn.execute('''
            SELECT l.id, l.title, l.date, c.grade, c.letter 
            FROM lessons l
            JOIN classes c ON l.class_id = c.id
            WHERE l.id = ? AND l.teacher_id = ?
        ''', (lesson_id, session['user_id'])).fetchone()
        
        if not lesson:
            return redirect(url_for('teacher_dashboard'))
        
        # Получаем задания урока
        tasks = conn.execute('''
            SELECT id, question, answer FROM lesson_tasks 
            WHERE lesson_id = ?
        ''', (lesson_id,)).fetchall()
        
        # Получаем все учебники для выпадающего списка
        textbooks = conn.execute('SELECT * FROM textbooks ORDER BY grade, title').fetchall()
        
        return render_template('edit_lesson.html',
                            lesson=dict(lesson),
                            tasks=[dict(task) for task in tasks],
                            textbooks=textbooks)
    finally:
        conn.close()

@app.route('/teacher/conduct_lesson/<int:lesson_id>')
def conduct_lesson(lesson_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Получаем информацию об уроке
        cursor.execute('''
            SELECT l.id, l.title, l.date, c.grade, c.letter 
            FROM lessons l
            JOIN classes c ON l.class_id = c.id
            WHERE l.id = ? AND l.teacher_id = ?
        ''', (lesson_id, session['user_id']))
        
        lesson = cursor.fetchone()
        if not lesson:
            return redirect(url_for('teacher_dashboard'))
        
        # Получаем список учеников класса
        cursor.execute('''
            SELECT u.id, u.full_name
            FROM users u
            JOIN classes c ON u.class_id = c.id
            JOIN lessons l ON l.class_id = c.id
            WHERE l.id = ? AND u.role = 'student'
            ORDER BY u.full_name
        ''', (lesson_id,))
        students = cursor.fetchall()
        
        # Получаем задания урока
        cursor.execute('''
            SELECT id, question FROM lesson_tasks
            WHERE lesson_id = ?
            ORDER BY id
        ''', (lesson_id,))
        tasks = cursor.fetchall()
        
        return render_template('conduct_lesson.html',
                            lesson=dict(lesson),
                            students=students,
                            tasks=tasks)
    except Exception as e:
        print(f"Error: {e}")
        return "Произошла ошибка", 500
    finally:
        conn.close()

@app.route('/teacher/create_lesson', methods=['POST'])
def create_lesson():
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    class_full = data['grade']  # Формат "6В"
    
    try:
        grade = int(class_full[:-1])  # "6"
        letter = class_full[-1]       # "В"
    except:
        return jsonify({'error': 'Invalid class format'}), 400
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Находим ID класса
        cursor.execute("SELECT id FROM classes WHERE grade = ? AND letter = ?", (grade, letter))
        class_id = cursor.fetchone()
        
        if not class_id:
            return jsonify({'error': 'Class not found'}), 404
        
        # Создаем урок
        cursor.execute('''
            INSERT INTO lessons (teacher_id, class_id, title, date)
            VALUES (?, ?, ?, ?)
        ''', (
            session['user_id'],
            class_id[0],
            data['title'],
            data['date']
        ))
        
        lesson_id = cursor.lastrowid
        conn.commit()
        
        return jsonify({
            'success': True,
            'lesson_id': lesson_id
        })
    except Exception as e:
        conn.rollback()
        print(f"Error creating lesson: {e}")
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()

@app.route('/teacher/update_lesson/<int:lesson_id>', methods=['POST'])
def update_lesson(lesson_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Обновляем или добавляем задания
        updated_tasks = []
        for task in data['tasks']:
            if task['id']:
                # Обновление существующего задания
                cursor.execute('''
                    UPDATE lesson_tasks 
                    SET question = ?, answer = ?
                    WHERE id = ? AND lesson_id = ?
                ''', (task['question'], task['answer'], task['id'], lesson_id))
            else:
                # Добавление нового задания
                cursor.execute('''
                    INSERT INTO lesson_tasks (lesson_id, question, answer)
                    VALUES (?, ?, ?)
                ''', (lesson_id, task['question'], task['answer']))
                updated_tasks.append({'id': cursor.lastrowid})
        
        conn.commit()
        return jsonify({'success': True, 'tasks': updated_tasks})
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        conn.close()

@app.route('/teacher/delete_task/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Проверяем, что задание принадлежит учителю
        cursor.execute('''
            DELETE FROM lesson_tasks 
            WHERE id = ? AND lesson_id IN (
                SELECT id FROM lessons WHERE teacher_id = ?
            )
        ''', (task_id, session['user_id']))
        
        conn.commit()
        return jsonify({'success': True})
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        conn.close()

@app.route('/teacher/manage_students')
def manage_students():
    if 'user_id' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))
    
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM classes ORDER BY grade, letter")
    classes = cursor.fetchall()
    conn.close()
    
    return render_template('manage_students.html', classes=classes)

@app.route('/teacher/get_students')
def get_students():
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    class_id = request.args.get('class_id')
    
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, username, full_name FROM users 
        WHERE role = 'student' AND class_id = ?
        ORDER BY full_name
    ''', (class_id,))
    students = cursor.fetchall()
    conn.close()
    
    return jsonify({
        'students': [dict(student) for student in students]
    })

@app.route('/teacher/add_student', methods=['POST'])
def add_student():
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO users (username, password, role, full_name, class_id)
            VALUES (?, ?, 'student', ?, ?)
        ''', (
            data['username'],
            generate_password_hash(data['password']),
            data['full_name'],
            data['class_id']
        ))
        conn.commit()
        return jsonify({'success': True})
    except sqlite3.IntegrityError as e:
        return jsonify({'success': False, 'error': 'Логин уже существует'})
    finally:
        conn.close()

@app.route('/teacher/delete_student/<int:student_id>', methods=['DELETE'])
def delete_student(student_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM users WHERE id = ? AND role = 'student'", (student_id,))
        conn.commit()
        return jsonify({'success': cursor.rowcount > 0})
    finally:
        conn.close()


@app.route('/student/lessons')
def student_lessons():
    if 'user_id' not in session or session['role'] != 'student':
        return redirect(url_for('login'))
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Получаем класс ученика
        cursor.execute("SELECT class_id FROM users WHERE id = ?", (session['user_id'],))
        class_id = cursor.fetchone()
        
        if not class_id:
            return "У вас не указан класс", 400
        
        class_id = class_id[0]
        
        # Получаем уроки для этого класса
        cursor.execute('''
            SELECT l.id, l.title, l.date, u.full_name as teacher_name 
            FROM lessons l
            JOIN users u ON l.teacher_id = u.id
            WHERE l.class_id = ?
            ORDER BY l.date DESC
        ''', (class_id,))
        lessons = cursor.fetchall()
        
        return render_template('student_lessons.html', 
                            lessons=lessons,
                            full_name=session['full_name'])
    except Exception as e:
        print(f"Error: {e}")
        return "Произошла ошибка", 500
    finally:
        conn.close()


@app.route('/lesson/<int:lesson_id>')
def start_lesson(lesson_id):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    user_id = session['user_id']
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Проверка доступа
        if session['role'] == 'student':
            cursor.execute('''
                SELECT 1 FROM lessons l
                JOIN users u ON l.class_id = u.class_id
                WHERE u.id = ? AND l.id = ?
            ''', (user_id, lesson_id))
            if not cursor.fetchone():
                return redirect(url_for('student_lessons'))
        
        # Получаем информацию об уроке
        cursor.execute('''
            SELECT l.title, l.date, u.full_name as teacher_name
            FROM lessons l
            JOIN users u ON l.teacher_id = u.id
            WHERE l.id = ?
        ''', (lesson_id,))
        lesson = cursor.fetchone()
        
        # Получаем базовые задания урока
        cursor.execute('''
            SELECT id, question, answer FROM lesson_tasks
            WHERE lesson_id = ?
            ORDER BY id
        ''', (lesson_id,))
        base_tasks = cursor.fetchall()
        
        tasks = []
        
        for task in base_tasks:
            # Проверяем, есть ли сохраненный вариант
            cursor.execute('''
                SELECT variant_data FROM student_task_variants
                WHERE lesson_id = ? AND user_id = ? AND task_id = ?
            ''', (lesson_id, user_id, task['id']))
            variant = cursor.fetchone()
            
            if variant:
                # Используем сохраненный вариант
                variant_data = json.loads(variant['variant_data'])
                question = task['question']
                answer = task['answer']
                
                # Заменяем параметры в вопросе
                for param, value in variant_data['params'].items():
                    question = question.replace(f'{{{param}}}', str(value))
                
                # Вычисляем ответ
                computed_answer = str(eval(answer.format(**variant_data['params'])))
                
                tasks.append({
                    'id': task['id'],
                    'question': question,
                    'correct_answer': computed_answer,
                    'params': variant_data['params']
                })
            else:
                # Генерируем новый вариант и сохраняем
                params = {}
                question = task['question']
                answer = task['answer']
                
                # Генерация параметров
                param_matches = set(re.findall(r'\{([A-Z])\}', question))
                for param in param_matches:
                    params[param] = random.randint(1, 10)  # Диапазон можно настроить
                
                # Заменяем параметры в вопросе
                generated_question = question
                for param, value in params.items():
                    generated_question = generated_question.replace(f'{{{param}}}', str(value))
                
                # Вычисляем ответ
                computed_answer = str(eval(answer.format(**params)))
                
                # Сохраняем вариант
                variant_data = {
                    'params': params,
                    'generated_question': generated_question,
                    'computed_answer': computed_answer
                }
                
                cursor.execute('''
                    INSERT INTO student_task_variants
                    (lesson_id, user_id, task_id, variant_data)
                    VALUES (?, ?, ?, ?)
                ''', (lesson_id, user_id, task['id'], json.dumps(variant_data)))
                
                tasks.append({
                    'id': task['id'],
                    'question': generated_question,
                    'correct_answer': computed_answer,
                    'params': params
                })
        
        conn.commit()
        return render_template('student_lesson.html',
                            lesson=dict(lesson),
                            tasks=tasks,
                            user_id=user_id)
        
    except Exception as e:
        conn.rollback()
        print(f"Error: {e}")
        return "Произошла ошибка", 500
    finally:
        conn.close()

@app.route('/save_answer', methods=['POST'])
def save_answer():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO student_answers
            (task_id, user_id, answer, is_correct, answered_at)
            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (
            data['task_id'],
            data['user_id'],
            data['answer'],
            data['is_correct']
        ))
        conn.commit()
        return jsonify({'success': True})
    except Exception as e:
        conn.rollback()
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()


@app.route('/check_answer', methods=['POST'])
def check_answer():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    user_id = session['user_id']
    task_id = data['task_id']
    lesson_id = data['lesson_id']
    user_answer = data['user_answer']
    correct_answer = data['correct_answer']
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Проверяем ответ (можно добавить более сложную логику)
        is_correct = str(user_answer) == str(correct_answer)
        
        # Сохраняем результат
        cursor.execute('''
            INSERT OR REPLACE INTO student_answers
            (task_id, user_id, answer, is_correct, answered_at)
            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (task_id, user_id, user_answer, is_correct))
        
        conn.commit()
        
        return jsonify({
            'correct': is_correct,
            'correct_answer': correct_answer
        })
    except Exception as e:
        conn.rollback()
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()

@app.route('/teacher/get_lesson_results/<int:lesson_id>')
def get_lesson_results(lesson_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Получаем список учеников и их ответов
        cursor.execute('''
            SELECT 
                u.id as user_id, 
                u.full_name,
                t.id as task_id,
                sa.answer,
                sa.is_correct
            FROM users u
            JOIN lessons l ON u.class_id = l.class_id
            JOIN lesson_tasks t ON t.lesson_id = l.id
            LEFT JOIN student_answers sa ON sa.task_id = t.id AND sa.user_id = u.id
            WHERE l.id = ? AND u.role = 'student'
            ORDER BY u.full_name, t.id
        ''', (lesson_id,))
        
        # Формируем структуру результатов
        results = {}
        for row in cursor.fetchall():
            user_id = row['user_id']
            if user_id not in results:
                results[user_id] = {
                    'user_id': user_id,
                    'full_name': row['full_name'],
                    'tasks': []
                }
            
            results[user_id]['tasks'].append({
                'task_id': row['task_id'],
                'answered': row['answer'] is not None,
                'is_correct': row['is_correct'] if row['is_correct'] is not None else False
            })
        
        return jsonify({
            'results': list(results.values())
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()

@app.route('/get_student_answers/<int:lesson_id>/<int:user_id>')
def get_student_answers(lesson_id, user_id):
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT sa.task_id, sa.answer, sa.is_correct
            FROM student_answers sa
            JOIN lesson_tasks lt ON sa.task_id = lt.id
            WHERE lt.lesson_id = ? AND sa.user_id = ?
        ''', (lesson_id, user_id))
        
        answers = cursor.fetchall()
        return jsonify([dict(answer) for answer in answers])
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()



@app.route('/teacher/end_lesson/<int:lesson_id>', methods=['POST'])
def end_lesson(lesson_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    # Здесь можно добавить логику завершения урока
    # Например, пометить урок как завершенный в базе данных
    
    return jsonify({'success': True})


@app.route('/teacher/get_student_progress/<int:lesson_id>/<int:student_id>')
def get_student_progress(lesson_id, student_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Получаем прогресс конкретного ученика
        cursor.execute('''
            SELECT 
                t.id as task_id,
                sa.answer,
                sa.is_correct,
                sa.answered_at
            FROM lesson_tasks t
            LEFT JOIN student_answers sa ON sa.task_id = t.id AND sa.user_id = ?
            WHERE t.lesson_id = ?
            ORDER BY t.id
        ''', (student_id, lesson_id))
        
        tasks = []
        correct_count = 0
        
        for task in cursor.fetchall():
            if task['is_correct']:
                correct_count += 1
            tasks.append({
                'task_id': task['task_id'],
                'answered': task['answer'] is not None,
                'is_correct': task['is_correct'],
                'answered_at': task['answered_at']
            })
        
        total_tasks = len(tasks)
        progress = round((correct_count / total_tasks) * 100) if total_tasks > 0 else 0
        
        return jsonify({
            'student_id': student_id,
            'progress': progress,
            'tasks': tasks
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        conn.close()


@app.route('/teacher/manage_tasks')
def manage_tasks():
    if 'user_id' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))
    
    conn = get_db()
    try:
        textbooks = conn.execute('SELECT * FROM textbooks ORDER BY grade, title').fetchall()
        return render_template('manage_tasks.html', 
                            full_name=session['full_name'],
                            textbooks=textbooks)
    except Exception as e:
        print(f"Error fetching textbooks: {e}")
        return "Произошла ошибка при загрузке учебников", 500
    finally:
        conn.close()


@app.route('/teacher/manage_tasks/<int:textbook_id>')
def textbook_tasks(textbook_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))
    
    conn = get_db()
    try:
        # Получаем учебник
        textbook = conn.execute('SELECT * FROM textbooks WHERE id = ?', (textbook_id,)).fetchone()
        if not textbook:
            flash('Учебник не найден', 'error')
            return redirect(url_for('manage_tasks'))
        
        # Получаем шаблоны заданий с нумерацией
        templates = conn.execute('''
            SELECT *, 
                   ROW_NUMBER() OVER (ORDER BY id) as task_number 
            FROM task_templates 
            WHERE textbook_id = ? 
            ORDER BY id
        ''', (textbook_id,)).fetchall()
        
        return render_template('textbook_tasks.html', 
                            full_name=session['full_name'],
                            textbook=dict(textbook),
                            templates=templates)
    except Exception as e:
        print(f"Error loading textbook tasks: {e}")
        flash('Произошла ошибка при загрузке заданий', 'error')
        return redirect(url_for('manage_tasks'))
    finally:
        conn.close()

@app.route('/teacher/add_task_template', methods=['POST'])
def add_task_template():
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    
    conn = get_db()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO task_templates 
            (textbook_id, name, question_template, answer_template, parameters)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            data['textbook_id'],
            data['name'],
            data['question_template'],
            data['answer_template'],
            json.dumps(data['parameters'])
        ))
        
        conn.commit()
        return jsonify({
            'success': True,
            'template_id': cursor.lastrowid
        })
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        conn.close()

@app.route('/teacher/update_task_template/<int:template_id>', methods=['POST'])
def update_task_template(template_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    
    conn = get_db()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE task_templates SET
                name = ?,
                question_template = ?,
                answer_template = ?,
                parameters = ?
            WHERE id = ?
        ''', (
            data['name'],
            data['question_template'],
            data['answer_template'],
            json.dumps(data['parameters']),
            template_id
        ))
        
        conn.commit()
        return jsonify({'success': True})
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        conn.close()

@app.route('/teacher/delete_task_template/<int:template_id>', methods=['DELETE'])
def delete_task_template(template_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    conn = get_db()
    try:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM task_templates WHERE id = ?', (template_id,))
        conn.commit()
        return jsonify({'success': True})
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        conn.close()
        

@app.route('/teacher/add_textbook', methods=['POST'])
def add_textbook():
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    title = data.get('title')
    description = data.get('description')
    grade = data.get('grade')
    
    if not title or not grade:
        return jsonify({'success': False, 'error': 'Название и класс обязательны'})
    
    conn = get_db()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO textbooks (title, description, grade)
            VALUES (?, ?, ?)
        ''', (title, description, grade))
        
        conn.commit()
        return jsonify({
            'success': True,
            'textbook_id': cursor.lastrowid
        })
    except sqlite3.IntegrityError:
        return jsonify({'success': False, 'error': 'Учебник с таким названием и классом уже существует'})
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        conn.close()

# Маршрут для сохранения шаблона
@app.route('/api/templates', methods=['POST'])
def save_template():
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401

    data = request.get_json()
    required_fields = ['textbook_id', 'name', 'question', 'answer', 'parameters']
    
    if not all(field in data for field in required_fields):
        return jsonify({'error': 'Missing required fields'}), 400

    conn = get_db()
    try:
        # Проверяем, существует ли учебник
        textbook = conn.execute(
            'SELECT 1 FROM textbooks WHERE id = ?', 
            (data['textbook_id'],)
        ).fetchone()
        
        if not textbook:
            return jsonify({'error': 'Textbook not found'}), 404

        # Сохраняем шаблон
        conn.execute('''
            INSERT INTO task_templates 
            (textbook_id, name, question_template, answer_template, parameters)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            data['textbook_id'],
            data['name'],
            data['question'],
            data['answer'],
            json.dumps(data['parameters'])
        ))
        
        conn.commit()
        return jsonify({
            'success': True,
            'template_id': conn.execute('SELECT last_insert_rowid()').fetchone()[0]
        })
    except sqlite3.IntegrityError as e:
        return jsonify({
            'success': False,
            'error': 'Template with this name already exists'
        }), 400
    except Exception as e:
        conn.rollback()
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500
    finally:
        conn.close()


@app.route('/api/textbooks/<int:textbook_id>/templates')
def get_templates(textbook_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db()
    try:
        templates = conn.execute('''
            SELECT id, name, question_template, answer_template, parameters
            FROM task_templates
            WHERE textbook_id = ?
            ORDER BY name
        ''', (textbook_id,)).fetchall()
        
        return jsonify({
            'success': True,
            'templates': [dict(t) for t in templates]
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500
    finally:
        conn.close()

# Маршрут для удаления шаблона
@app.route('/api/templates/<int:template_id>', methods=['DELETE'])
def delete_templates(template_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db()
    try:
        result = conn.execute(
            'DELETE FROM task_templates WHERE id = ?', 
            (template_id,)
        )
        conn.commit()
        
        if result.rowcount == 0:
            return jsonify({'success': False, 'error': 'Template not found'}), 404
            
        return jsonify({'success': True})
    except Exception as e:
        conn.rollback()
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500
    finally:
        conn.close()

@app.route('/api/templates/<int:template_id>')
def get_template(template_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db()
    try:
        template = conn.execute('''
            SELECT id, textbook_id, name, question_template, answer_template, parameters
            FROM task_templates
            WHERE id = ?
        ''', (template_id,)).fetchone()

        if not template:
            return jsonify({'success': False, 'error': 'Template not found'}), 404

        return jsonify({
            'success': True,
            'template': dict(template)
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500
    finally:
        conn.close()
        
with app.app_context():
    init_db()

if __name__ == '__main__':
    app.run(debug=True)
================================================================================
ФАЙЛ: import_templates.py
================================================================================
import sqlite3
import json

DB_PATH = 'database.db'  # или укажи абсолютный путь, если база не рядом
JSON_FILE = 'templates.json'

with open(JSON_FILE, encoding='utf-8') as f:
    templates = json.load(f)

conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

for tpl in templates:
    cursor.execute('''
        INSERT INTO task_templates 
        (textbook_id, name, question_template, answer_template, parameters)
        VALUES (?, ?, ?, ?, ?)
    ''', (
        tpl['textbook_id'],
        tpl['name'],
        tpl['question_template'],
        tpl['answer_template'],
        json.dumps(tpl['parameters'], ensure_ascii=False)
    ))

conn.commit()
conn.close()

print("✅ Шаблоны успешно загружены в базу данных.")

================================================================================
ФАЙЛ: static\css\edit_lesson.css
================================================================================
/* Боковая панель с шаблонами */
.templates-sidebar {
    width: 300px;
    background: #f8f9fa;
    border-right: 1px solid #ddd;
    padding: 20px;
    height: calc(100vh - 80px);
    position: fixed;
    overflow-y: auto;
}

.sidebar-header {
    margin-bottom: 15px;
}

.templates-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.search-box {
    margin-bottom: 15px;
}

.search-box input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.template-item {
    background: white;
    padding: 12px;
    border-radius: 6px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: all 0.2s;
}

.template-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.template-item h4 {
    margin: 0 0 5px 0;
    color: var(--primary-color);
}

.template-item p {
    margin: 0;
    font-size: 14px;
    color: var(--light-text);
}

.template-item .template-actions {
    display: flex;
    gap: 8px;
    margin-top: 10px;
}

/* Адаптация основного контента */
.tasks-section {
    margin-left: 320px;
    width: calc(100% - 320px);
}

@media (max-width: 992px) {
    .templates-sidebar {
        width: 250px;
    }
    .tasks-section {
        margin-left: 260px;
        width: calc(100% - 260px);
    }
}

@media (max-width: 768px) {
    .templates-sidebar {
        position: static;
        width: 100%;
        height: auto;
        border-right: none;
        border-bottom: 1px solid #ddd;
    }
    .tasks-section {
        margin-left: 0;
        width: 100%;
    }
}
/* В edit_lesson.css */
.param-constraints {
    margin-top: 10px;
    border-top: 1px dashed #ddd;
    padding-top: 10px;
}

.constraint {
    display: flex;
    gap: 10px;
    margin: 5px 0;
    align-items: center;
}

.constraint-type {
    flex: 1;
}

.constraint-value {
    flex: 2;
}
================================================================================
ФАЙЛ: static\css\math_editor.css
================================================================================
.math-editor {
    margin-top: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 15px;
}

.math-toolbar {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    margin-bottom: 10px;
}

.btn-math {
    padding: 5px 10px;
    background: var(--secondary-color);
    border: none;
    border-radius: 3px;
    cursor: pointer;
}

.math-editor-area {
    width: 100%;
    min-height: 100px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-family: monospace;
}

.math-preview {
    margin-top: 10px;
    padding: 10px;
    background: #f9f9f9;
    border-radius: 5px;
    min-height: 50px;
}

.param-group {
    margin-bottom: 10px;
}

.param-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
}

.param-input, .param-select {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}
================================================================================
ФАЙЛ: static\css\style.css
================================================================================
:root {
    --primary-color: #4a6bff;
    --secondary-color: #f5f7ff;
    --error-color: #ff4757;
    --success-color: #2ed573;
    --text-color: #2f3542;
    --light-text: #747d8c;
    --white: #ffffff;
    --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
}

body {
    background-color: #f1f2f6;
    color: var(--text-color);
    line-height: 1.6;
}

/* Auth Styles */
.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.auth-card {
    background: var(--white);
    border-radius: 10px;
    box-shadow: var(--shadow);
    padding: 30px;
    width: 100%;
    max-width: 450px;
}

.auth-header {
    text-align: center;
    margin-bottom: 30px;
}

.auth-logo {
    width: 80px;
    height: 80px;
    margin-bottom: 15px;
}

.auth-header h1 {
    font-size: 24px;
    font-weight: 700;
    margin-bottom: 5px;
}

.auth-header p {
    color: var(--light-text);
    font-size: 14px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}

.form-group input {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
    transition: border 0.3s;
}

.form-group input:focus {
    border-color: var(--primary-color);
    outline: none;
}

.btn {
    display: inline-block;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    text-align: center;
    transition: all 0.3s;
    text-decoration: none;
}

.btn-primary {
    background-color: var(--primary-color);
    color: var(--white);
    width: 100%;
}

.btn-primary:hover {
    background-color: #3a56e0;
}

.alert {
    padding: 12px;
    border-radius: 5px;
    margin-bottom: 20px;
    font-size: 14px;
}

.alert-error {
    background-color: #ffebee;
    color: var(--error-color);
    border: 1px solid #ffcdd2;
}

.auth-footer {
    margin-top: 20px;
    text-align: center;
    font-size: 14px;
    color: var(--light-text);
}

/* Dashboard Styles */
.dashboard-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

.dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 30px;
    background-color: var(--white);
    box-shadow: var(--shadow);
}

.header-left {
    display: flex;
    align-items: center;
}

.header-logo {
    width: 40px;
    height: 40px;
    margin-right: 15px;
}

.header-right {
    display: flex;
    align-items: center;
}

.user-greeting {
    margin-right: 20px;
    font-weight: 500;
}

.btn-logout {
    background-color: var(--secondary-color);
    color: var(--primary-color);
}

.btn-logout:hover {
    background-color: #e0e5ff;
}

.dashboard-main {
    flex: 1;
    padding: 30px;
}

.welcome-section {
    text-align: center;
    margin-bottom: 40px;
}

.welcome-section h2 {
    font-size: 28px;
    margin-bottom: 10px;
}

.welcome-section p {
    color: var(--light-text);
    max-width: 600px;
    margin: 0 auto;
}

.subjects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 30px;
}

.subject-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    text-align: center;
    transition: transform 0.3s;
}

.subject-card:hover {
    transform: translateY(-5px);
}

.subject-icon {
    width: 60px;
    height: 60px;
    margin: 0 auto 15px;
    background-color: var(--secondary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.subject-icon svg {
    width: 30px;
    height: 30px;
    color: var(--primary-color);
}

.subject-card h3 {
    margin-bottom: 10px;
    font-size: 20px;
}

.subject-card p {
    color: var(--light-text);
    margin-bottom: 20px;
    font-size: 14px;
}

.btn-subject {
    background-color: var(--primary-color);
    color: var(--white);
    padding: 8px 20px;
    font-size: 14px;
}

/* Teacher Dashboard */
.teacher-dashboard .welcome-section {
    text-align: left;
    margin-bottom: 30px;
}

.teacher-actions {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

.action-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    transition: transform 0.3s;
}

.action-card:hover {
    transform: translateY(-5px);
}

.action-card h3 {
    margin-bottom: 10px;
    font-size: 18px;
}

.action-card p {
    color: var(--light-text);
    margin-bottom: 20px;
    font-size: 14px;
}

.btn-action {
    background-color: var(--primary-color);
    color: var(--white);
    padding: 8px 20px;
    font-size: 14px;
}
/* Добавляем в style.css */
.class-selection {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.grade-buttons, .letter-buttons {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    margin: 15px 0;
}

.btn-grade, .btn-letter {
    padding: 8px 15px;
    background: var(--secondary-color);
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;
}

.btn-grade:hover, .btn-letter:hover {
    background: #d0d8ff;
}

.btn-grade.active, .btn-letter.active {
    background: var(--primary-color);
    color: white;
}

.hidden {
    display: none;
}

/* Модальное окно */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    padding: 25px;
    border-radius: 8px;
    width: 80%;
    max-width: 700px;
    max-height: 90vh;
    overflow-y: auto;
}

.close {
    float: right;
    font-size: 24px;
    cursor: pointer;
}

.task-template textarea {
    width: 100%;
    min-height: 100px;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.parameters {
    margin: 15px 0;
}

.param-control {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
    align-items: center;
}

.param-control input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.btn-small {
    padding: 5px 10px;
    font-size: 14px;
}
/* Стили для модального окна */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal.hidden {
    display: none;
}

.modal:not(.hidden) {
    display: flex;
}

.modal-content {
    background: white;
    padding: 25px;
    border-radius: 8px;
    width: 90%;
    max-width: 600px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

/* Стили для параметров */
.param-row {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
}

.param-row input {
    width: 80px;
    padding: 6px;
}

.btn-remove-param {
    background: #ff4757;
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    cursor: pointer;
}

/* Стили для списка уроков */
.lessons-list {
    margin-top: 30px;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: var(--shadow);
}

.lessons-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 15px;
}

.lesson-card {
    display: flex;
    flex-direction: column;
    background: var(--secondary-color);
    padding: 15px;
    border-radius: 8px;
    transition: transform 0.3s;
}

.lesson-card:hover {
    transform: translateY(-3px);
}

.lesson-icon {
    width: 40px;
    height: 40px;
    background: var(--primary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
}

.lesson-icon svg {
    width: 20px;
    height: 20px;
    color: white;
}

.lesson-info h4 {
    margin-bottom: 5px;
}

.lesson-info p {
    color: var(--light-text);
    font-size: 14px;
}

.lesson-actions {
    margin-top: 15px;
    display: flex;
    gap: 10px;
}

.btn-small {
    padding: 6px 12px;
    font-size: 14px;
}

.edit-lesson-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.lesson-meta {
    background: var(--secondary-color);
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.tasks-section {
    margin-top: 30px;
}

.task-card {
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 15px;
}

.task-question, .task-answer {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    min-height: 60px;
}

.btn-remove-task {
    background: var(--error-color);
    color: white;
}

.save-actions {
    margin-top: 30px;
    text-align: center;
}

.btn-save {
    background: var(--success-color);
    padding: 12px 30px;
}
/* Стили для редактирования урока */
.edit-lesson-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 30px;
}

.task-creation-guide {
    background: var(--secondary-color);
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.task-creation-guide h4 {
    margin-bottom: 10px;
    color: var(--primary-color);
}

.task-card {
    background: var(--white);
    border-radius: 10px;
    padding: 20px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.task-header h3 {
    margin: 0;
    color: var(--primary-color);
}

.task-question, .task-answer {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-bottom: 15px;
    font-size: 16px;
    min-height: 80px;
    resize: vertical;
}

.task-question:focus, .task-answer:focus {
    border-color: var(--primary-color);
    outline: none;
}

.task-preview {
    background: #f9f9f9;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 15px;
}

.task-preview h4 {
    margin-top: 0;
    color: var(--light-text);
    font-size: 14px;
}

.example {
    background: white;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
}

.example p {
    margin: 5px 0;
}

.params {
    font-size: 12px;
    color: var(--light-text);
}

.answer-section {
    margin-top: 15px;
}

.answer-section label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}

.hint {
    font-size: 13px;
    color: var(--light-text);
    margin-top: 5px;
}
.task-number {
    color: var(--primary-color);
    font-weight: bold;
}

/* Стили для списка уроков ученика */
.lessons-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.lesson-card {
    background: var(--white);
    border-radius: 10px;
    padding: 20px;
    box-shadow: var(--shadow);
    transition: transform 0.3s;
}

.lesson-card:hover {
    transform: translateY(-5px);
}

.lesson-icon {
    width: 50px;
    height: 50px;
    background: var(--primary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 15px;
}

.lesson-icon svg {
    width: 24px;
    height: 24px;
    color: white;
}

.lesson-info h3 {
    margin-bottom: 10px;
    color: var(--primary-color);
}

.lesson-info p {
    color: var(--light-text);
    margin-bottom: 5px;
    font-size: 14px;
}

.lesson-actions {
    margin-top: 15px;
}
/* Стили для заданий ученика */
.task-card {
    background: var(--white);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: var(--shadow);
}

.task-question {
    margin-bottom: 15px;
    font-size: 16px;
}

.task-question p {
    margin: 0;
}

.task-answer {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 10px;
}

.answer-input {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    flex-grow: 1;
}

.result {
    margin-top: 10px;
    padding: 8px;
    border-radius: 4px;
}

.hidden {
    display: none;
}
/* Основные стили урока */
.lesson-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    font-family: 'Roboto', sans-serif;
}

.lesson-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
}

.lesson-header h1 {
    color: var(--primary-color);
    margin: 0;
}

.lesson-meta {
    font-size: 14px;
    color: var(--light-text);
    margin-top: 5px;
}

.lesson-meta span {
    margin-right: 15px;
}

/* Стили заданий */
.task-card {
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 20px;
    overflow: hidden;
    transition: all 0.3s ease;
}

.task-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background: var(--secondary-color);
}

.task-number {
    font-weight: 500;
    color: var(--primary-color);
}

.task-status {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid #ddd;
}

.task-body {
    padding: 20px;
}

.task-question {
    font-size: 16px;
    line-height: 1.6;
    margin-bottom: 20px;
}

.task-answer {
    display: flex;
    gap: 10px;
}

.answer-input {
    flex: 1;
    padding: 10px 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
}

/* Стили обратной связи */
.task-feedback {
    margin-top: 15px;
    padding: 15px;
    border-radius: 5px;
}

.feedback-correct {
    color: var(--success-color);
    display: flex;
    align-items: center;
    gap: 10px;
}

.feedback-incorrect {
    color: var(--error-color);
    display: flex;
    align-items: center;
    gap: 10px;
}

.icon {
    font-size: 20px;
    font-weight: bold;
}

.btn-hint {
    margin-left: 15px;
    background: none;
    border: none;
    color: var(--primary-color);
    cursor: pointer;
    text-decoration: underline;
}

.task-hint {
    margin-top: 15px;
    padding: 15px;
    background: #f9f9f9;
    border-radius: 5px;
    border-left: 3px solid var(--primary-color);
}

/* Прогресс */
.lesson-progress {
    margin-top: 30px;
    padding: 20px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.progress-bar {
    height: 10px;
    background: #f0f0f0;
    border-radius: 5px;
    margin: 10px 0;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: var(--primary-color);
    transition: width 0.3s ease;
}

.progress-text {
    text-align: center;
    color: var(--light-text);
    font-size: 14px;
}

/* Утилиты */
.hidden {
    display: none;
}

/* Стили для управления заданиями */
.manage-tasks-container {
    padding: 20px;
}

.textbooks-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.textbook-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    text-align: center;
    transition: transform 0.3s;
}

.textbook-card:hover {
    transform: translateY(-5px);
}

.textbook-icon {
    width: 60px;
    height: 60px;
    margin: 0 auto 15px;
    background-color: var(--secondary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.textbook-icon svg {
    width: 30px;
    height: 30px;
    color: var(--primary-color);
}
/* Стили для управления шаблонами заданий */
.textbook-tasks-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    padding: 20px;
}

.template-card {
    background: var(--white);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: var(--shadow);
}

.template-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.template-content {
    font-size: 14px;
}

.param-group {
    background: var(--secondary-color);
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
}

.param-control {
    display: flex;
    align-items: center;
    margin: 5px 0;
}

.param-control label {
    width: 80px;
    margin-right: 10px;
}

.param-control input {
    width: 60px;
    padding: 5px;
}
.manage-tasks-container {
    padding: 20px;
}

.textbooks-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.textbook-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    text-align: center;
    transition: transform 0.3s;
}

.textbook-card:hover {
    transform: translateY(-5px);
}

.textbook-icon {
    width: 60px;
    height: 60px;
    margin: 0 auto 15px;
    background-color: var(--secondary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.textbook-icon svg {
    width: 30px;
    height: 30px;
    color: var(--primary-color);
}
/* Стили для управления учебниками */
.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.add-form {
    background: var(--secondary-color);
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.add-form .form-group {
    margin-bottom: 15px;
}

.add-form label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
}

.add-form .form-control {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.form-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

.no-textbooks {
    text-align: center;
    padding: 40px;
    background: var(--secondary-color);
    border-radius: 8px;
    color: var(--light-text);
}
/* Стили для шаблонов заданий */
.task-card {
    background: var(--white);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: var(--shadow);
}

.task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.task-actions {
    display: flex;
    gap: 5px;
}

.task-content {
    font-size: 14px;
}

.task-field {
    margin-bottom: 10px;
}

.task-field label {
    font-weight: 500;
    display: block;
    margin-bottom: 5px;
}

.question-preview,
.answer-preview {
    background: var(--secondary-color);
    padding: 8px;
    border-radius: 4px;
}

.no-tasks {
    text-align: center;
    padding: 40px;
    background: var(--secondary-color);
    border-radius: 8px;
    color: var(--light-text);
}

.task-form {
    background: var(--white);
    padding: 20px;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.hint {
    font-size: 13px;
    color: var(--light-text);
    margin-top: 5px;
}
/* Стили для страницы шаблонов */
.textbook-tasks-container {
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.task-form {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    border: 1px solid #ddd;
}

.templates-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.template-card {
    background: white;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.template-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.template-actions {
    display: flex;
    gap: 10px;
}

.btn-icon {
    background: none;
    border: none;
    font-size: 16px;
    cursor: pointer;
    padding: 5px;
}

.no-templates {
    text-align: center;
    color: #666;
    padding: 20px;
}

.hidden {
    display: none;
}
/* Стили для страницы шаблонов */
.textbook-tasks-container {
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.task-form {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    border: 1px solid #ddd;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
}

.form-hint {
    color: #666;
    font-size: 0.9em;
}

.params-container {
    margin: 15px 0;
}

.param-group {
    background: #fff;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
    border: 1px solid #eee;
}

.param-row {
    display: flex;
    gap: 15px;
    margin-top: 5px;
}

.templates-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.template-card {
    background: white;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.template-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.template-actions {
    display: flex;
    gap: 10px;
}

.btn-icon {
    background: none;
    border: none;
    font-size: 16px;
    cursor: pointer;
    padding: 5px;
}

.no-templates {
    text-align: center;
    color: #666;
    padding: 20px;
}

.hidden {
    display: none;
}

.form-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}
================================================================================
ФАЙЛ: static\css\teacher_dashboard.css
================================================================================
/* Стили для проведения урока */
.conduct-lesson-container {
    padding: 20px;
}

.real-time-results {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.results-table-container {
    overflow-x: auto;
}

.results-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

.results-table th, .results-table td {
    padding: 12px 15px;
    text-align: center;
    border-bottom: 1px solid #eee;
}

.results-table th {
    background: var(--secondary-color);
    color: var(--primary-color);
    font-weight: 500;
}

.correct {
    color: var(--success-color);
    font-weight: bold;
}

.incorrect {
    color: var(--error-color);
    font-weight: bold;
}

.pending {
    color: var(--light-text);
}

.progress-container {
    position: relative;
    height: 20px;
    background: #f0f0f0;
    border-radius: 10px;
    overflow: hidden;
}

.progress-container .progress-bar {
    height: 100%;
    background: var(--primary-color);
    transition: width 0.3s ease;
}

.progress-container span {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 12px;
    color: white;
    z-index: 1;
}

.lesson-controls {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 20px;
}
.conduct-lesson-container {
    padding: 20px;
}

.class-info {
    margin-right: 20px;
    font-weight: 500;
    color: var(--primary-color);
}

.real-time-results {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.results-table-container {
    overflow-x: auto;
}

.results-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

.results-table th, .results-table td {
    padding: 12px 15px;
    text-align: center;
    border-bottom: 1px solid #eee;
}

.results-table th {
    background: var(--secondary-color);
    color: var(--primary-color);
    font-weight: 500;
}

.task-result .correct {
    color: var(--success-color);
    font-weight: bold;
}

.task-result .incorrect {
    color: var(--error-color);
    font-weight: bold;
}

.task-result .pending {
    color: var(--light-text);
}

.progress-container {
    position: relative;
    height: 20px;
    background: #f0f0f0;
    border-radius: 10px;
    overflow: hidden;
}

.progress-container .progress-bar {
    height: 100%;
    background: var(--primary-color);
    transition: width 0.3s ease;
}

.progress-container span {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 12px;
    color: white;
    z-index: 1;
}

.lesson-controls {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 20px;
}
================================================================================
ФАЙЛ: static\js\bulk_actions.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const textbookId = document.querySelector('.textbook-tasks-container').dataset.textbookId;
    const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');
    const selectAllBtn = document.getElementById('selectAllBtn');
    const checkboxes = document.querySelectorAll('.template-checkbox');
    
    // Обработчик выбора шаблонов
    function updateDeleteButton() {
        const selected = document.querySelectorAll('.template-checkbox:checked');
        deleteSelectedBtn.disabled = selected.length === 0;
        deleteSelectedBtn.textContent = selected.length > 0 ? 
            `Удалить выбранные (${selected.length})` : 'Удалить выбранные';
    }
    
    // Выбрать все/снять выделение
    selectAllBtn.addEventListener('click', function() {
        const allChecked = document.querySelectorAll('.template-checkbox:checked').length === checkboxes.length;
        checkboxes.forEach(checkbox => {
            checkbox.checked = !allChecked;
        });
        updateDeleteButton();
    });
    
    // Обработчики для чекбоксов
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateDeleteButton);
    });
    
    // Массовое удаление
    deleteSelectedBtn.addEventListener('click', function() {
        const selectedIds = Array.from(document.querySelectorAll('.template-checkbox:checked'))
            .map(checkbox => parseInt(checkbox.dataset.id));
        
        if (!selectedIds.length) return;
        
        if (confirm(`Вы уверены, что хотите удалить ${selectedIds.length} шаблонов?`)) {
            fetch('/teacher/bulk_delete_templates', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    textbook_id: textbookId,
                    template_ids: selectedIds
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`Удалено ${data.deleted_count} шаблонов`);
                    window.location.reload();
                } else {
                    alert('Ошибка удаления: ' + (data.error || ''));
                }
            });
        }
    });
});
================================================================================
ФАЙЛ: static\js\conduct_lesson.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const lessonId = window.location.pathname.split('/').pop();
    const refreshBtn = document.getElementById('refreshResults');
    const endLessonBtn = document.getElementById('endLesson');
    let studentIds = [];
    
    // Получаем ID всех учеников
    document.querySelectorAll('#studentsResults tr').forEach(row => {
        studentIds.push(row.dataset.studentId || row.cells[0].textContent.trim());
    });
    
    // Функция обновления результатов
    async function updateResults() {
        try {
            // Создаем массив промисов для каждого ученика
            const promises = studentIds.map(studentId => 
                fetch(`/teacher/get_student_progress/${lessonId}/${studentId}`)
                    .then(res => res.json())
            );
            
            const results = await Promise.all(promises);
            
            results.forEach(studentData => {
                updateStudentRow(studentData);
            });
        } catch (error) {
            console.error('Error updating results:', error);
        }
    }
    
    // Обновляем строку конкретного ученика
    function updateStudentRow(studentData) {
        const row = document.querySelector(`tr[data-student-id="${studentData.student_id}"]`) || 
                   [...document.querySelectorAll('#studentsResults tr')].find(tr => 
                       tr.cells[0].textContent.includes(studentData.student_id)
                   );
        
        if (!row) return;
        
        // Обновляем задания
        studentData.tasks.forEach((task, index) => {
            const taskCell = row.cells[index + 1]; // +1 потому что первая ячейка - имя
            if (taskCell) {
                if (task.answered) {
                    taskCell.innerHTML = task.is_correct ? 
                        '<span class="correct">✓</span>' : 
                        '<span class="incorrect">✗</span>';
                } else {
                    taskCell.innerHTML = '<span class="pending">—</span>';
                }
            }
        });
        
        // Обновляем прогресс
        const progressBar = row.querySelector('.progress-bar');
        const progressText = row.querySelector('.progress-container span');
        if (progressBar && progressText) {
            progressBar.style.width = `${studentData.progress}%`;
            progressText.textContent = `${studentData.progress}%`;
        }
    }
    
    // Первоначальная загрузка
    updateResults();
    
    // Автоматическое обновление каждые 3 секунды
    const intervalId = setInterval(updateResults, 3000);
    
    // Ручное обновление
    refreshBtn.addEventListener('click', updateResults);
    
    // Завершение урока
    endLessonBtn.addEventListener('click', function() {
        if (confirm('Завершить урок? Ученики больше не смогут отвечать.')) {
            fetch(`/teacher/end_lesson/${lessonId}`, {
                method: 'POST'
            }).then(response => {
                if (response.ok) {
                    clearInterval(intervalId);
                    window.location.href = '/teacher/dashboard';
                }
            });
        }
    });
    
    // Очистка при закрытии страницы
    window.addEventListener('beforeunload', () => clearInterval(intervalId));
});
================================================================================
ФАЙЛ: static\js\edit_lesson.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const tasksContainer = document.getElementById('tasksContainer');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const saveLessonBtn = document.getElementById('saveLessonBtn');
    const lessonId = window.location.pathname.split('/').pop();

    // ===== ОСНОВНЫЕ ФУНКЦИИ ДЛЯ РАБОТЫ С ЗАДАНИЯМИ =====
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function generateExample(question, answer) {
        const paramsEl = document.querySelector('.template-params');
        const params = paramsEl ? JSON.parse(paramsEl.dataset.params) : {};
        
        // Генерация значений с учетом ограничений
        const values = {};
        for (const param in params) {
            let valid = false;
            let value;
            const config = params[param];
            
            // Пытаемся сгенерировать значение, удовлетворяющее всем условиям
            for (let i = 0; i < 100 && !valid; i++) {
                value = config.type === 'float' ? 
                    getRandomFloat(config.min, config.max) :
                    getRandomInt(config.min, config.max);
                
                valid = true;
                
                // Проверяем ограничения
                if (config.constraints) {
                    for (const constraint of config.constraints) {
                        if (constraint.type === 'multiple_of' && value % constraint.value !== 0) {
                            valid = false;
                        } else if (constraint.type === 'greater_than') {
                            const compareTo = constraint.param ? values[constraint.param] : constraint.value;
                            if (value <= compareTo) valid = false;
                        }
                        // другие проверки
                    }
                }
            }
            
            values[param] = value || config.min; // fallback
        }
        
        // Заменяем параметры в вопросе и ответе
        let exampleQuestion = question;
        let exampleAnswer = answer;
        
        for (const param in values) {
            const value = values[param];
            exampleQuestion = exampleQuestion.replace(new RegExp(`\\{${param}\\}`, 'g'), value);
            exampleAnswer = exampleAnswer.replace(new RegExp(`\\{${param}\\}`, 'g'), value);
        }
        
        try {
            exampleAnswer = eval(exampleAnswer).toString();
        } catch (e) {
            exampleAnswer = "Неверная формула ответа";
        }
        
        return {
            question: exampleQuestion,
            answer: exampleAnswer,
            params: values
        };
    }

    function updatePreview(taskCard) {
        const question = taskCard.querySelector('.task-question').value;
        const answer = taskCard.querySelector('.task-answer').value;
        const previewContainer = taskCard.querySelector('.preview-examples');
        
        if (!question || !answer) {
            previewContainer.innerHTML = '<p>Введите вопрос и формулу ответа</p>';
            return;
        }
        
        const example = generateExample(question, answer);
        previewContainer.innerHTML = `
            <div class="example">
                <p><strong>Вопрос:</strong> ${example.question}</p>
                <p><strong>Ответ:</strong> ${example.answer}</p>
                <p class="params">Параметры: ${JSON.stringify(example.params)}</p>
            </div>
        `;
    }

    function updateTaskNumbers() {
        const taskCards = document.querySelectorAll('.task-card');
        taskCards.forEach((card, index) => {
            card.querySelector('.task-number').textContent = index + 1;
        });
    }

    // ===== ФУНКЦИОНАЛ ШАБЛОНОВ ИЗ УЧЕБНИКОВ =====
    const textbookSelect = document.getElementById('textbookSelect');
    const templateItems = document.getElementById('templateItems');
    const templateSearch = document.getElementById('templateSearch');

    // Загрузка шаблонов при изменении учебника
    textbookSelect.addEventListener('change', loadTemplates);

    // Поиск шаблонов
    templateSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const items = templateItems.querySelectorAll('.template-item');
        
        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            item.style.display = text.includes(searchTerm) ? 'block' : 'none';
        });
    });

    // Загрузка шаблонов из учебника
    async function loadTemplates() {
        
        const textbookId = textbookSelect.value;
        
        
        try {
            const response = await fetch(`/api/textbooks/${textbookId}/templates`);
            const data = await response.json();
            
            if (data.success) {
                renderTemplates(data.templates);
            } else {
                throw new Error(data.error || 'Ошибка загрузки шаблонов');
            }
        } catch (error) {
            console.error('Ошибка загрузки шаблонов:', error);
            alert('Не удалось загрузить шаблоны');
        }
    }

    // Отображение списка шаблонов
    function renderTemplates(templates) {
        templateItems.innerHTML = templates.length ? '' : '<p>Нет шаблонов для этого учебника</p>';
        
        templates.forEach(template => {
            const item = document.createElement('div');
            item.className = 'template-item';
            item.innerHTML = `
                <h4>${template.name}</h4>
                <p>${template.question_template}</p>
                <div class="template-actions">
                    <button class="btn btn-small btn-add-template" data-id="${template.id}">Добавить</button>
                    <button class="btn btn-small btn-preview-template">Пример</button>
                </div>
            `;
            templateItems.appendChild(item);
        });

        // Обработчики для кнопок шаблонов
        templateItems.querySelectorAll('.btn-add-template').forEach(btn => {
            btn.addEventListener('click', function() {
                const templateId = this.dataset.id;
                addTemplateToLesson(templateId);
            });
        });

        templateItems.querySelectorAll('.btn-preview-template').forEach(btn => {
            btn.addEventListener('click', function() {
                const templateItem = this.closest('.template-item');
                const question = templateItem.querySelector('p').textContent;
                alert(`Пример задания:\n\n${question}`);
            });
        });
    }

    // Добавление шаблона в урок
    async function addTemplateToLesson(templateId) {
        try {
            const response = await fetch(`/api/templates/${templateId}`);
            const data = await response.json();
            
            if (data.success) {
                const template = data.template;
                createTaskFromTemplate(template);
            } else {
                throw new Error(data.error || 'Ошибка загрузки шаблона');
            }
        } catch (error) {
            console.error('Ошибка добавления шаблона:', error);
            alert('Не удалось добавить шаблон');
        }
    }

    // Создание задания из шаблона
    function createTaskFromTemplate(template) {
        const taskCard = document.createElement('div');
        taskCard.className = 'task-card';
        
        // Парсим параметры шаблона
        const params = JSON.parse(template.parameters);
        const paramsHint = Object.keys(params).map(p => {
            const constraints = params[p].constraints?.map(c => {
                if (c.type === 'multiple_of') return `кратно ${c.value}`;
                if (c.type === 'greater_than') return `> ${c.param || c.value}`;
                // другие типы условий
                return `${c.type} ${c.param || c.value}`;
            }).join(', ');
            
            return `${p} (${params[p].min}-${params[p].max}${constraints ? ', ' + constraints : ''})`;
        }).join(', ');

        taskCard.innerHTML = `
            <div class="task-header">
                <h3>Задание <span class="task-number">${tasksContainer.children.length + 1}</span></h3>
                <button class="btn btn-danger btn-remove-task">Удалить</button>
            </div>
            <textarea class="task-question">${template.question_template}</textarea>
            <div class="task-preview">
                <h4>Пример для учителя:</h4>
                <div class="preview-examples"></div>
            </div>
            <div class="answer-section">
                <label>Формула ответа:</label>
                <textarea class="task-answer">${template.answer_template}</textarea>
                <p class="hint">Используйте параметры: ${paramsHint}</p>
                <div class="template-params hidden" data-params='${JSON.stringify(params)}'></div>
            </div>
        `;
        
        tasksContainer.appendChild(taskCard);
        updateTaskNumbers();
        updatePreview(taskCard);
        
        // Добавляем обработчики для нового задания
        taskCard.querySelector('.task-question').addEventListener('input', () => updatePreview(taskCard));
        taskCard.querySelector('.task-answer').addEventListener('input', () => updatePreview(taskCard));
        
        // Прокручиваем к новому заданию
        taskCard.scrollIntoView({ behavior: 'smooth' });
    }

    // ===== ОСНОВНОЙ ФУНКЦИОНАЛ РЕДАКТИРОВАНИЯ УРОКА =====
    // Добавление нового задания
    addTaskBtn.addEventListener('click', function() {
        const taskCard = document.createElement('div');
        taskCard.className = 'task-card';
        taskCard.innerHTML = `
            <div class="task-header">
                <h3>Задание <span class="task-number">1</span></h3>
                <button class="btn btn-danger btn-remove-task">Удалить</button>
            </div>
            <textarea class="task-question" placeholder="Введите вопрос с параметрами {A}, {B}..."></textarea>
            <div class="task-preview">
                <h4>Пример для учителя:</h4>
                <div class="preview-examples"></div>
            </div>
            <div class="answer-section">
                <label>Формула ответа:</label>
                <textarea class="task-answer" placeholder="Введите формулу с параметрами {A}, {B}..."></textarea>
                <p class="hint">Например: для вопроса "{A} + {B}" формула ответа будет "{A} + {B}"</p>
            </div>
        `;
        
        tasksContainer.appendChild(taskCard);
        updateTaskNumbers();
        
        // Добавляем обработчики для обновления превью
        taskCard.querySelector('.task-question').addEventListener('input', () => updatePreview(taskCard));
        taskCard.querySelector('.task-answer').addEventListener('input', () => updatePreview(taskCard));
    });

    // Удаление задания
    tasksContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('btn-remove-task')) {
            const taskCard = e.target.closest('.task-card');
            const taskId = taskCard.dataset.taskId;
            
            if (taskId) {
                fetch(`/teacher/delete_task/${taskId}`, {
                    method: 'DELETE'
                }).then(response => {
                    if (!response.ok) throw new Error('Ошибка удаления');
                    taskCard.remove();
                    updateTaskNumbers();
                });
            } else {
                taskCard.remove();
                updateTaskNumbers();
            }
        }
    });

    // Сохранение изменений
    saveLessonBtn.addEventListener('click', function() {
        const tasks = [];
        document.querySelectorAll('.task-card').forEach(taskCard => {
            tasks.push({
                id: taskCard.dataset.taskId || null,
                question: taskCard.querySelector('.task-question').value,
                answer: taskCard.querySelector('.task-answer').value
            });
        });

        fetch(`/teacher/update_lesson/${lessonId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ tasks: tasks })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Изменения сохранены!');
                data.tasks.forEach((task, index) => {
                    if (!tasks[index].id) {
                        document.querySelectorAll('.task-card')[index].dataset.taskId = task.id;
                    }
                });
            } else {
                alert('Ошибка сохранения: ' + (data.error || ''));
            }
        });
    });

    // Инициализация превью для существующих заданий
    document.querySelectorAll('.task-card').forEach(taskCard => {
        taskCard.querySelector('.task-question').addEventListener('input', () => updatePreview(taskCard));
        taskCard.querySelector('.task-answer').addEventListener('input', () => updatePreview(taskCard));
        updatePreview(taskCard);
    });

    // Первоначальная загрузка шаблонов
    loadTemplates();
});
================================================================================
ФАЙЛ: static\js\manage_students.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const classSelect = document.getElementById('classSelect');
    const showStudentsBtn = document.getElementById('showStudentsBtn');
    const studentsTable = document.getElementById('studentsTable').querySelector('tbody');
    const currentClassSpan = document.getElementById('currentClass');
    const addStudentBtn = document.getElementById('addStudentBtn');

    // Загрузка списка учеников
    function loadStudents(classId) {
        fetch(`/teacher/get_students?class_id=${classId}`)
            .then(response => response.json())
            .then(data => {
                studentsTable.innerHTML = '';
                data.students.forEach(student => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${student.id}</td>
                        <td>${student.full_name}</td>
                        <td>${student.username}</td>
                        <td>
                            <button class="btn btn-danger btn-sm delete-student" data-id="${student.id}">Удалить</button>
                        </td>
                    `;
                    studentsTable.appendChild(row);
                });
                
                // Установка текущего класса
                const selectedOption = classSelect.options[classSelect.selectedIndex];
                currentClassSpan.textContent = selectedOption.text;
            });
    }

    // Показать учеников выбранного класса
    showStudentsBtn.addEventListener('click', function() {
        loadStudents(classSelect.value);
    });

    // Добавление нового ученика
    addStudentBtn.addEventListener('click', function() {
        const name = document.getElementById('newStudentName').value.trim();
        const login = document.getElementById('newStudentLogin').value.trim();
        const password = document.getElementById('newStudentPassword').value.trim();
        const classId = classSelect.value;

        if (!name || !login || !password) {
            alert('Заполните все поля');
            return;
        }

        fetch('/teacher/add_student', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                full_name: name,
                username: login,
                password: password,
                class_id: classId
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                loadStudents(classId);
                document.getElementById('newStudentName').value = '';
                document.getElementById('newStudentLogin').value = '';
                document.getElementById('newStudentPassword').value = '';
            } else {
                alert(data.error || 'Ошибка добавления');
            }
        });
    });

    // Удаление ученика
    studentsTable.addEventListener('click', function(e) {
        if (e.target.classList.contains('delete-student')) {
            if (confirm('Удалить этого ученика?')) {
                const studentId = e.target.dataset.id;
                fetch(`/teacher/delete_student/${studentId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadStudents(classSelect.value);
                    } else {
                        alert(data.error || 'Ошибка удаления');
                    }
                });
            }
        }
    });

    // Загрузить учеников первого класса по умолчанию
    if (classSelect.options.length > 0) {
        loadStudents(classSelect.value);
    }
});
================================================================================
ФАЙЛ: static\js\manage_tasks.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const addTextbookBtn = document.getElementById('addTextbookBtn');
    const addTextbookForm = document.getElementById('addTextbookForm');
    const saveTextbookBtn = document.getElementById('saveTextbookBtn');
    const cancelTextbookBtn = document.getElementById('cancelTextbookBtn');
    
    // Показать/скрыть форму добавления
    addTextbookBtn.addEventListener('click', function() {
        addTextbookForm.classList.remove('hidden');
        addTextbookBtn.classList.add('hidden');
    });
    
    cancelTextbookBtn.addEventListener('click', function() {
        addTextbookForm.classList.add('hidden');
        addTextbookBtn.classList.remove('hidden');
    });
    
    // Сохранение нового учебника
    saveTextbookBtn.addEventListener('click', function() {
        const title = document.getElementById('textbookTitle').value.trim();
        const description = document.getElementById('textbookDescription').value.trim();
        const grade = document.getElementById('textbookGrade').value;
        
        if (!title) {
            alert('Введите название учебника');
            return;
        }
        
        fetch('/teacher/add_textbook', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                title: title,
                description: description,
                grade: grade
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert(data.error || 'Ошибка при сохранении учебника');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Ошибка при сохранении учебника');
        });
    });
});
================================================================================
ФАЙЛ: static\js\math_editor.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const templateType = document.getElementById('templateType');
    const templateParams = document.getElementById('templateParams');
    const taskEditor = document.getElementById('taskEditor');
    const mathPreview = document.getElementById('mathPreview');
    
    // Загрузка шаблонов при выборе типа
    templateType.addEventListener('change', function() {
        if (this.value === 'custom') {
            templateParams.classList.add('hidden');
            taskEditor.value = '';
            updatePreview();
            return;
        }
        
        fetch(`/get_math_templates?type=${this.value}`)
            .then(response => response.json())
            .then(templates => {
                renderTemplateParams(templates[0]); // Берем первый подходящий шаблон
            });
    });
    
    // Кнопки математического редактора
    document.querySelectorAll('.btn-math').forEach(btn => {
        btn.addEventListener('click', function() {
            insertAtCursor(taskEditor, this.dataset.insert);
        });
    });
    
    // Обновление превью при изменении
    taskEditor.addEventListener('input', updatePreview);
    
    function renderTemplateParams(template) {
        templateParams.innerHTML = '';
        const params = JSON.parse(template.parameters);
        
        for (const [param, config] of Object.entries(params)) {
            const paramDiv = document.createElement('div');
            paramDiv.className = 'param-group';
            
            const label = document.createElement('label');
            label.textContent = `Параметр ${param}:`;
            
            let input;
            if (config.type === 'int' || config.type === 'float') {
                input = document.createElement('input');
                input.type = 'number';
                input.step = config.step || 1;
                input.min = config.min;
                input.max = config.max;
                input.value = config.default || config.min;
                input.className = 'param-input';
                input.dataset.param = param;
            } else if (config.type === 'choice') {
                input = document.createElement('select');
                input.className = 'param-select';
                input.dataset.param = param;
                config.values.forEach(value => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = value;
                    input.appendChild(option);
                });
            }
            
            paramDiv.appendChild(label);
            paramDiv.appendChild(input);
            templateParams.appendChild(paramDiv);
        }
        
        templateParams.classList.remove('hidden');
        taskEditor.value = template.template;
        updatePreview();
    }
    
    function insertAtCursor(field, value) {
        const startPos = field.selectionStart;
        const endPos = field.selectionEnd;
        const cursorPos = startPos;
        const beforeText = field.value.substring(0, startPos);
        const afterText = field.value.substring(endPos, field.value.length);
        
        field.value = beforeText + value + afterText;
        field.selectionStart = cursorPos + value.indexOf('}') + 1;
        field.selectionEnd = field.selectionStart;
        field.focus();
        
        updatePreview();
    }
    
    function updatePreview() {
        // Здесь можно подключить библиотеку MathJax или KaTeX для рендеринга
        mathPreview.textContent = taskEditor.value;
    }
});
================================================================================
ФАЙЛ: static\js\student_lesson.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    const lessonId = window.location.pathname.split('/').pop();
    const userId = document.querySelector('.task-card')?.dataset.userId;
    let completedTasks = 0;
    
    // Загрузка сохраненных ответов
    if (userId) {
        fetch(`/get_student_answers/${lessonId}/${userId}`)
            .then(response => {
                if (!response.ok) throw new Error('Network error');
                return response.json();
            })
            .then(answers => {
                answers.forEach(answer => {
                    const taskCard = document.querySelector(`.task-card[data-task-id="${answer.task_id}"]`);
                    if (taskCard) {
                        const input = taskCard.querySelector('.answer-input');
                        const checkBtn = taskCard.querySelector('.btn-check');
                        const feedback = taskCard.querySelector('.task-feedback');
                        const status = taskCard.querySelector('.task-status');
                        
                        if (answer.answer) {
                            input.value = answer.answer;
                            input.disabled = true;
                            checkBtn.disabled = true;
                            
                            if (answer.is_correct) {
                                taskCard.querySelector('.feedback-correct').classList.remove('hidden');
                                status.style.backgroundColor = 'var(--success-color)';
                                status.style.borderColor = 'var(--success-color)';
                                completedTasks++;
                            } else {
                                taskCard.querySelector('.feedback-incorrect').classList.remove('hidden');
                                status.style.backgroundColor = 'var(--error-color)';
                                status.style.borderColor = 'var(--error-color)';
                            }
                            
                            feedback.classList.remove('hidden');
                        }
                    }
                });
                updateProgress();
            })
            .catch(error => {
                console.error('Error loading answers:', error);
            });
    }
    
    // Обработка проверки ответов
    document.querySelectorAll('.btn-check').forEach(button => {
        button.addEventListener('click', async function() {
            const taskCard = this.closest('.task-card');
            const taskId = taskCard.dataset.taskId;
            const userAnswer = taskCard.querySelector('.answer-input').value.trim();
            const correctAnswer = taskCard.querySelector('.correct-answer').textContent;
            const feedback = taskCard.querySelector('.task-feedback');
            const correctFeedback = taskCard.querySelector('.feedback-correct');
            const incorrectFeedback = taskCard.querySelector('.feedback-incorrect');
            const status = taskCard.querySelector('.task-status');
            
            if (!userAnswer) {
                alert('Пожалуйста, введите ответ');
                return;
            }
            
            try {
                const response = await fetch('/check_answer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        lesson_id: lessonId,
                        task_id: taskId,
                        user_id: userId,
                        user_answer: userAnswer,
                        correct_answer: correctAnswer
                    })
                });
                
                if (!response.ok) throw new Error('Server error');
                
                const result = await response.json();
                
                if (result.correct) {
                    // Правильный ответ
                    correctFeedback.classList.remove('hidden');
                    incorrectFeedback.classList.add('hidden');
                    status.style.backgroundColor = 'var(--success-color)';
                    status.style.borderColor = 'var(--success-color)';
                    completedTasks++;
                } else {
                    // Неправильный ответ
                    correctFeedback.classList.add('hidden');
                    incorrectFeedback.classList.remove('hidden');
                    status.style.backgroundColor = 'var(--error-color)';
                    status.style.borderColor = 'var(--error-color)';
                }
                
                feedback.classList.remove('hidden');
                taskCard.querySelector('.answer-input').disabled = true;
                this.disabled = true;
                
                updateProgress();
                
            } catch (error) {
                console.error('Error:', error);
                alert('Произошла ошибка при проверке ответа');
            }
        });
    });
    
    // Показать/скрыть подсказку
    document.querySelectorAll('.btn-hint').forEach(button => {
        button.addEventListener('click', function() {
            const hint = this.closest('.task-feedback').querySelector('.task-hint');
            hint.classList.toggle('hidden');
        });
    });
    
    // Обновление прогресса
    function updateProgress() {
        const progressFill = document.querySelector('.progress-fill');
        const progressText = document.querySelector('.progress-text');
        const totalTasks = document.querySelectorAll('.task-card').length;
        const percentage = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
        
        progressFill.style.width = `${percentage}%`;
        progressText.textContent = `${completedTasks} из ${totalTasks} заданий`;
    }
});
================================================================================
ФАЙЛ: static\js\teacher.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    // Элементы интерфейса
    const gradeButtons = document.querySelectorAll('.btn-grade');
    const letterButtons = document.querySelector('.letter-buttons');
    const createBtn = document.getElementById('createNewLesson');
    const modal = document.getElementById('lessonModal');
    const closeBtn = document.querySelector('.close');
    const saveLessonBtn = document.getElementById('saveLesson');
    
    let selectedGrade = null;
    let selectedLetter = null;

    // 1. Выбор класса (5-11)
    gradeButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            gradeButtons.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            selectedGrade = this.dataset.grade;
            letterButtons.classList.remove('hidden');
            createBtn.classList.add('hidden');
        });
    });

    // 2. Выбор буквы класса (А-Д)
    document.querySelectorAll('.btn-letter').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.btn-letter').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            selectedLetter = this.dataset.letter;
            createBtn.classList.remove('hidden');
            loadLessons(selectedGrade, selectedLetter);
        });
    });

    // 3. Открытие модального окна
    createBtn.addEventListener('click', function() {
        // Устанавливаем сегодняшнюю дату по умолчанию
        document.getElementById('lessonDate').value = new Date().toISOString().split('T')[0];
        modal.classList.remove('hidden');
    });

    // 4. Закрытие модального окна
    function closeModal() {
        modal.classList.add('hidden');
    }
    
    closeBtn.addEventListener('click', closeModal);
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            closeModal();
        }
    });

    // 5. Сохранение урока
    saveLessonBtn.addEventListener('click', async function() {
        const title = document.getElementById('lessonTitle').value.trim();
        const date = document.getElementById('lessonDate').value;
        
        if (!title) {
            alert('Введите название урока');
            return;
        }

        try {
            const response = await fetch('/teacher/create_lesson', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    grade: `${selectedGrade}${selectedLetter}`,
                    title: title,
                    date: date
                })
            });

            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error || 'Ошибка сервера');
            }

            if (data.success && data.lesson_id) {
                // Перенаправляем на страницу редактирования
                window.location.href = `/teacher/edit_lesson/${data.lesson_id}`;
            } else {
                throw new Error('Не удалось создать урок');
            }
        } catch (error) {
            console.error('Error:', error);
            alert(`Ошибка создания урока: ${error.message}`);
        }
    });

    // Функция для загрузки уроков класса
    async function loadLessons(grade, letter) {
        try {
            const response = await fetch(`/teacher/get_lessons?grade=${grade}${letter}`);
            const data = await response.json();
            
            if (response.status !== 200) {
                throw new Error(data.error || 'Ошибка загрузки уроков');
            }
            
            const container = document.querySelector('.lessons-container');
            container.innerHTML = '';
            
            if (!data.lessons || data.lessons.length === 0) {
                container.innerHTML = '<p>Нет созданных уроков</p>';
                return;
            }
            
            data.lessons.forEach(lesson => {
                const lessonElement = document.createElement('div');
                lessonElement.className = 'lesson-card';
                lessonElement.innerHTML = `
                    <div class="lesson-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                        </svg>
                    </div>
                    <div class="lesson-info">
                        <h4>${lesson.title}</h4>
                        <p>${lesson.date}</p>
                    </div>
                    <div class="lesson-actions">
                        <a href="/teacher/conduct_lesson/${lesson.id}" class="btn btn-small">Войти в урок</a>
                        <a href="/teacher/edit_lesson/${lesson.id}" class="btn btn-small btn-secondary">Редактировать</a>
                    </div>
                `;
                container.appendChild(lessonElement);
            });
            
            document.querySelector('.lessons-list').classList.remove('hidden');
        } catch (error) {
            console.error('Error loading lessons:', error);
            alert(`Ошибка загрузки уроков: ${error.message}`);
        }
    }
});
================================================================================
ФАЙЛ: static\js\teacher_create_lesson.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    // Элементы
    const tasksContainer = document.getElementById('tasksContainer');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const saveLessonBtn = document.getElementById('saveLessonBtn');
    const previewLessonBtn = document.getElementById('previewLessonBtn');
    const generateWithAIBtn = document.getElementById('generateWithAI');
    const aiPrompt = document.getElementById('aiPrompt');
    const aiResults = document.getElementById('aiResults');
    const aiTasksList = document.getElementById('aiTasksList');
    const addAiTasksBtn = document.getElementById('addAiTasks');
    const taskTemplate = document.getElementById('taskTemplate');

    // Добавление нового задания
    function addTask(taskText = '') {
        const taskClone = taskTemplate.content.cloneNode(true);
        const taskElement = taskClone.querySelector('.task-card');
        const taskNumber = tasksContainer.children.length + 1;
        
        taskClone.querySelector('.task-number').textContent = taskNumber;
        if (taskText) {
            taskClone.querySelector('.task-text').value = taskText;
        }
        
        // Кнопка удаления
        taskClone.querySelector('.btn-remove-task').addEventListener('click', function() {
            tasksContainer.removeChild(taskElement);
            updateTaskNumbers();
        });
        
        // Превью примеров
        taskClone.querySelector('.btn-preview-task').addEventListener('click', function() {
            const previewDiv = taskElement.querySelector('.task-preview');
            previewDiv.classList.toggle('hidden');
            
            if (!previewDiv.classList.contains('hidden')) {
                generateExamples(taskElement);
            }
        });
        
        tasksContainer.appendChild(taskClone);
    }

    // Обновление нумерации заданий
    function updateTaskNumbers() {
        Array.from(tasksContainer.children).forEach((task, index) => {
            task.querySelector('.task-number').textContent = index + 1;
        });
    }

    // Генерация примеров для задания
    function generateExamples(taskElement) {
        const taskText = taskElement.querySelector('.task-text').value;
        const examplesDiv = taskElement.querySelector('.preview-examples');
        examplesDiv.innerHTML = '';
        
        if (!taskText) return;
        
        // Находим параметры {A}, {B}...
        const params = [...new Set(taskText.match(/\{([A-Z])\}/g))].map(p => p.replace(/\{|\}/g, ''));
        
        // Генерируем 3 примера
        for (let i = 0; i < 3; i++) {
            const example = { ...taskText };
            const values = {};
            
            // Заполняем параметры случайными значениями
            params.forEach(param => {
                values[param] = getRandomInt(1, 10);
                example = example.replace(new RegExp(`\\{${param}\\}`, 'g'), values[param]);
            });
            
            const exampleDiv = document.createElement('div');
            exampleDiv.className = 'example';
            exampleDiv.textContent = example;
            examplesDiv.appendChild(exampleDiv);
        }
    }

    // Генерация через DeepSeek
    generateWithAIBtn.addEventListener('click', async function() {
        if (!aiPrompt.value.trim()) {
            alert('Введите описание заданий');
            return;
        }
        
        generateWithAIBtn.disabled = true;
        generateWithAIBtn.textContent = 'Генерация...';
        
        try {
            const response = await fetch('/teacher/generate_with_ai', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: aiPrompt.value })
            });
            
            const data = await response.json();
            displayAITasks(data.tasks);
        } catch (error) {
            console.error('AI generation error:', error);
            alert('Ошибка генерации');
        } finally {
            generateWithAIBtn.disabled = false;
            generateWithAIBtn.textContent = 'Сгенерировать задания';
        }
    });

    // Отображение результатов ИИ
    function displayAITasks(tasks) {
        aiTasksList.innerHTML = '';
        tasks.forEach(task => {
            const taskDiv = document.createElement('div');
            taskDiv.className = 'ai-task';
            taskDiv.innerHTML = `
                <input type="checkbox" checked>
                <div class="ai-task-text">${task}</div>
            `;
            aiTasksList.appendChild(taskDiv);
        });
        aiResults.classList.remove('hidden');
    }

    // Добавление выбранных заданий от ИИ
    addAiTasksBtn.addEventListener('click', function() {
        document.querySelectorAll('.ai-task input:checked').forEach(checkbox => {
            const taskText = checkbox.nextElementSibling.textContent;
            addTask(taskText);
        });
        aiResults.classList.add('hidden');
    });

    // Сохранение урока
    saveLessonBtn.addEventListener('click', function() {
        const tasks = [];
        document.querySelectorAll('.task-card').forEach(task => {
            tasks.push({
                text: task.querySelector('.task-text').value,
                params: [...new Set(task.querySelector('.task-text').value.match(/\{([A-Z])\}/g))]
                    .map(p => p.replace(/\{|\}/g, ''))
            });
        });
        
        if (tasks.length === 0) {
            alert('Добавьте хотя бы одно задание');
            return;
        }
        
        fetch('/teacher/save_lesson', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                class_name: '{{ class_name }}',
                tasks: tasks
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.href = '/teacher/dashboard';
            } else {
                alert('Ошибка сохранения: ' + (data.error || ''));
            }
        });
    });

    // Вспомогательные функции
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // Инициализация
    addTaskBtn.addEventListener('click', () => addTask());
    addTask(); // Добавляем первое задание по умолчанию
});
================================================================================
ФАЙЛ: static\js\textbook_tasks.js
================================================================================
document.addEventListener('DOMContentLoaded', function() {
    // Конфигурация
    const textbookId = document.querySelector('.textbook-tasks-container').dataset.textbookId;
    const API_BASE = '/api';
    const TEXTS = {
        deleteConfirm: 'Удалить этот шаблон задания?',
        saveSuccess: 'Шаблон успешно сохранён',
        deleteSuccess: 'Шаблон удалён'
    };

    // Элементы
    const elements = {
        showFormBtn: document.getElementById('showFormBtn'),
        taskForm: document.getElementById('taskForm'),
        cancelBtn: document.getElementById('cancelBtn'),
        saveBtn: document.getElementById('saveTemplateBtn'),
        templatesList: document.getElementById('templatesList'),
        formTitle: document.querySelector('#taskForm h3'),
        templateName: document.getElementById('templateName'),
        questionTemplate: document.getElementById('questionTemplate'),
        answerTemplate: document.getElementById('answerTemplate'),
        paramsContainer: document.getElementById('paramsContainer')
    };

    // Текущее состояние
    let state = {
        currentTemplateId: null,
        isEditing: false
    };

    // ===== ОСНОВНЫЕ ФУНКЦИИ =====
    function toggleForm(show = true) {
        elements.taskForm.classList.toggle('hidden', !show);
        if (show) {
            elements.formTitle.textContent = state.isEditing 
                ? 'Редактирование шаблона' 
                : 'Новый шаблон задания';
        }
    }

    function resetForm() {
        elements.templateName.value = '';
        elements.questionTemplate.value = '';
        elements.answerTemplate.value = '';
        elements.paramsContainer.innerHTML = '';
        state.currentTemplateId = null;
        state.isEditing = false;
    }

    function updateParameters() {
        const question = elements.questionTemplate.value;
        const answer = elements.answerTemplate.value;
        elements.paramsContainer.innerHTML = '';

        const params = new Set();
        const regex = /\{([A-Za-z]+)\}/g;
        let match;
        
        while ((match = regex.exec(question))) params.add(match[1]);
        while ((match = regex.exec(answer))) params.add(match[1]);

        params.forEach(param => {
        const group = document.createElement('div');
        group.className = 'param-group';
        group.innerHTML = `
            <h4>Параметр ${param}</h4>
            <div class="param-row">
                <label>Тип:
                    <select class="param-type">
                        <option value="int">Целое число</option>
                        <option value="float">Дробное число</option>
                    </select>
                </label>
                <label>Минимум: <input type="number" class="param-min" value="1" min="0"></label>
                <label>Максимум: <input type="number" class="param-max" value="10" min="1"></label>
            </div>
            <div class="param-constraints">
                <button class="btn btn-small add-constraint">+ Добавить условие</button>
            </div>
        `;
        elements.paramsContainer.appendChild(group);
    });
    
    // Обработчик для добавления условий
        document.querySelectorAll('.add-constraint').forEach(btn => {
            btn.addEventListener('click', function() {
                const constraintsContainer = this.closest('.param-group').querySelector('.param-constraints');
                const constraintDiv = document.createElement('div');
                constraintDiv.className = 'constraint';
                constraintDiv.innerHTML = `
                    <select class="constraint-type">
                        <option value="multiple_of">Кратно</option>
                        <option value="greater_than">Больше чем</option>
                        <option value="less_than">Меньше чем</option>
                        <option value="equals">Равно</option>
                    </select>
                    <input type="text" class="constraint-value" placeholder="Значение или параметр">
                    <button class="btn-icon remove-constraint">×</button>
                `;
                constraintsContainer.insertBefore(constraintDiv, this);
            });
        });
        }

    async function saveTemplate() {
        const name = elements.templateName.value.trim();
        const question = elements.questionTemplate.value.trim();
        const answer = elements.questionTemplate.value.trim();

        if (!name || !question || !answer) {
            alert('Заполните все обязательные поля');
            return;
        }

        // Собираем параметры
        const params = {};
        const paramGroups = elements.paramsContainer.querySelectorAll('.param-group');
        
        for (const group of paramGroups) {
            const param = group.querySelector('h4').textContent.replace('Параметр ', '');
            const min = parseInt(group.querySelector('.param-min').value);
            const max = parseInt(group.querySelector('.param-max').value);
            
            if (min >= max) {
                alert(`Для параметра ${param} максимум должен быть больше минимума`);
                return;
            }
            
            params[param] = { min, max };
        }

        try {
            const url = state.isEditing 
                ? `${API_BASE}/templates/${state.currentTemplateId}`
                : `${API_BASE}/templates`;

            const method = state.isEditing ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    textbook_id: textbookId,
                    name: name,
                    question: question,
                    answer: answer,
                    parameters: params
                })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Ошибка сервера');
            }

            alert(TEXTS.saveSuccess);
            resetForm();
            toggleForm(false);
            loadTemplates(); // Перезагружаем список
        } catch (error) {
            console.error('Ошибка сохранения:', error);
            alert(`Ошибка: ${error.message}`);
        }
    }

    async function loadTemplates() {
        try {
            const response = await fetch(`/api/textbooks/${textbookId}/templates`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            renderTemplates(data.templates);
        } catch (error) {
            console.error('Ошибка загрузки:', error);
            // Добавьте отладочную информацию
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = `Ошибка загрузки шаблонов: ${error.message}`;
            elements.templatesList.appendChild(errorDiv);
        }
    }

    function renderTemplates(templates) {
        elements.templatesList.innerHTML = templates.length 
            ? templates.map((template, index) => `
                <div class="template-card" data-id="${template.id}">
                    <div class="template-header">
                        <h3>№${index + 1}: ${template.name}</h3>
                        <div class="template-actions">
                            <button class="btn-icon edit-btn">✏️</button>
                            <button class="btn-icon delete-btn">🗑️</button>
                        </div>
                    </div>
                    <div class="template-content">
                        <p><strong>Вопрос:</strong> ${template.question_template}</p>
                        <p><strong>Ответ:</strong> ${template.answer_template}</p>
                    </div>
                </div>
            `).join('')
            : '<p class="no-templates">Нет созданных шаблонов</p>';
    }

    async function deleteTemplate(templateId) {
        if (!confirm(TEXTS.deleteConfirm)) return;

        try {
            const response = await fetch(`${API_BASE}/templates/${templateId}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Ошибка удаления');
            }

            alert(TEXTS.deleteSuccess);
            loadTemplates(); // Перезагружаем список
        } catch (error) {
            console.error('Ошибка удаления:', error);
            alert(`Ошибка удаления: ${error.message}`);
        }
    }

    function setupEditTemplate(templateId) {
        // В реальном приложении нужно загрузить данные шаблона
        // Для примера просто переключаем в режим редактирования
        state.currentTemplateId = templateId;
        state.isEditing = true;
        toggleForm(true);
    }

    // ===== ИНИЦИАЛИЗАЦИЯ =====
    function initEventListeners() {
        elements.showFormBtn.addEventListener('click', () => {
            resetForm();
            toggleForm(true);
        });

        elements.cancelBtn.addEventListener('click', () => toggleForm(false));
        elements.saveBtn.addEventListener('click', saveTemplate);
        elements.questionTemplate.addEventListener('input', updateParameters);
        elements.answerTemplate.addEventListener('input', updateParameters);

        // Делегирование событий для списка
        elements.templatesList.addEventListener('click', (e) => {
            const card = e.target.closest('.template-card');
            if (!card) return;

            const templateId = parseInt(card.dataset.id);

            if (e.target.classList.contains('delete-btn')) {
                deleteTemplate(templateId);
            } else if (e.target.classList.contains('edit-btn')) {
                setupEditTemplate(templateId);
            }
        });
    }

    // Запуск приложения
    function init() {
        initEventListeners();
        loadTemplates();
        console.log('Textbook tasks module initialized');
    }

    init();
});
================================================================================
ФАЙЛ: templates\auth.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Платформа урока. СОШ №62 - Авторизация</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="auth-logo">
                <h1>Платформа урока. СОШ №62</h1>
                <p>Система интерактивного обучения математике</p>
            </div>
            
            <form id="loginForm" method="POST" action="{{ url_for('login') }}">
                {% if error %}
                <div class="alert alert-error">{{ error }}</div>
                {% endif %}
                
                <div class="form-group">
                    <label for="username">Имя пользователя</label>
                    <input type="text" id="username" name="username" required>
                </div>
                
                <div class="form-group">
                    <label for="password">Пароль</label>
                    <input type="password" id="password" name="password" required>
                </div>
                
                <button type="submit" class="btn btn-primary">Войти</button>
            </form>
            
            <div class="auth-footer">
                <p>Нет аккаунта? Обратитесь к администратору</p>
            </div>
        </div>
    </div>
    
    <script src="{{ url_for('static', filename='js/auth.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\conduct_lesson.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Проведение урока | {{ lesson.title }}</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/teacher_dashboard.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Проведение урока: {{ lesson.title }}</h1>
            </div>
            <div class="header-right">
                <span class="class-info">{{ lesson.grade }}{{ lesson.letter }} класс</span>
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="conduct-lesson-container">
            <div class="real-time-results">
                <h2>Результаты класса</h2>
                <div class="results-table-container">
                    <table class="results-table">
                        <thead>
                            <tr>
                                <th>Ученик</th>
                                {% for task in tasks %}
                                <th>Задание {{ loop.index }}</th>
                                {% endfor %}
                                <th>Прогресс</th>
                            </tr>
                        </thead>
                        <tbody id="studentsResults">
                            {% for student in students %}
                            <tr data-student-id="{{ student.id }}">
                                <td>{{ student.full_name }}</td>
                                {% for task in tasks %}
                                <td data-task-id="{{ task.id }}">
                                    <span class="pending">—</span>
                                </td>
                                {% endfor %}
                                <td>
                                    <div class="progress-container">
                                        <div class="progress-bar" style="width: 0%"></div>
                                        <span>0%</span>
                                    </div>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="lesson-controls">
                <button id="refreshResults" class="btn btn-primary">Обновить результаты</button>
                <button id="endLesson" class="btn btn-danger">Завершить урок</button>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/conduct_lesson.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\edit_lesson.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Редактирование урока | Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/edit_lesson.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Редактирование урока: {{ lesson.title }}</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="edit-lesson-container">
            <aside class="templates-sidebar">
                <div class="sidebar-header">
                    <h3>Шаблоны заданий</h3>
                    <select id="textbookSelect" class="form-control">
                        {% for textbook in textbooks %}
                        <option value="{{ textbook.id }}">{{ textbook.title }} ({{ textbook.grade }} класс)</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div class="templates-list">
                    <div class="search-box">
                        <input type="text" id="templateSearch" placeholder="Поиск шаблонов...">
                    </div>
                    
                    <div class="template-items" id="templateItems">
                        <!-- Шаблоны будут загружаться здесь -->
                    </div>
                </div>
            </aside>
            
            <div class="lesson-meta">
                <h3>Класс: {{ lesson.grade }}</h3>
                <p>Дата проведения: {{ lesson.date }}</p>
            </div>

            <div class="tasks-section">
                <h2>Задания урока</h2>
                <div class="task-creation-guide">
                    <h4>Как создавать задания:</h4>
                    <p>Используйте параметры в фигурных скобках {A}, {B} и т.д. Они будут заменены случайными значениями для каждого ученика.</p>
                    <p>Пример: "Решите уравнение: {A}x + {B} = {C}"</p>
                </div>
                
                <div id="tasksContainer">
                    {% for task in tasks %}
                    <div class="task-card" data-task-id="{{ task.id }}">
                        <div class="task-header">
                            <h3>Задание <span class="task-number">1</span></h3>
                            <button class="btn btn-danger btn-remove-task">Удалить</button>
                        </div>
                        <textarea class="task-question">{{ task.question }}</textarea>
                        <div class="task-preview">
                            <h4>Пример для учителя:</h4>
                            <div class="preview-examples"></div>
                        </div>
                        <div class="answer-section">
                            <label>Формула ответа:</label>
                            <textarea class="task-answer">{{ task.answer }}</textarea>
                            <p class="hint">Используйте параметры из вопроса ({A}, {B}) для расчета ответа</p>
                        </div>
                    </div>
                    {% endfor %}
                </div>
                <button id="addTaskBtn" class="btn btn-primary">+ Добавить задание</button>
            </div>

            <div class="save-actions">
                <button id="saveLessonBtn" class="btn btn-save">Сохранить изменения</button>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/edit_lesson.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\manage_students.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Управление учениками</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Управление учениками</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="manage-students-container">
            <div class="class-selection">
                <h3>Выберите класс:</h3>
                <select id="classSelect" class="form-control">
                    {% for class in classes %}
                    <option value="{{ class.id }}">{{ class.grade }}{{ class.letter }}</option>
                    {% endfor %}
                </select>
                <button id="showStudentsBtn" class="btn btn-primary">Показать учеников</button>
            </div>

            <div class="students-list">
                <h3>Ученики класса <span id="currentClass"></span></h3>
                <table id="studentsTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>ФИО</th>
                            <th>Логин</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                
                <div class="add-student-form">
                    <h4>Добавить нового ученика:</h4>
                    <input type="text" id="newStudentName" placeholder="ФИО" class="form-control">
                    <input type="text" id="newStudentLogin" placeholder="Логин" class="form-control">
                    <input type="password" id="newStudentPassword" placeholder="Пароль" class="form-control">
                    <button id="addStudentBtn" class="btn btn-primary">Добавить</button>
                </div>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/manage_students.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\manage_tasks.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Управление заданиями</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Управление заданиями</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="manage-tasks-container">
            <div class="textbooks-section">
                <div class="section-header">
                    <h2>Доступные учебники</h2>
                    <button id="addTextbookBtn" class="btn btn-primary">+ Добавить учебник</button>
                </div>
                
                <div id="addTextbookForm" class="add-form hidden">
                    <div class="form-group">
                        <label>Название учебника:</label>
                        <input type="text" id="textbookTitle" class="form-control">
                    </div>
                    <div class="form-group">
                        <label>Описание:</label>
                        <input type="text" id="textbookDescription" class="form-control">
                    </div>
                    <div class="form-group">
                        <label>Класс:</label>
                        <select id="textbookGrade" class="form-control">
                            {% for grade in range(5, 12) %}
                            <option value="{{ grade }}">{{ grade }} класс</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="form-actions">
                        <button id="saveTextbookBtn" class="btn btn-primary">Сохранить</button>
                        <button id="cancelTextbookBtn" class="btn btn-secondary">Отмена</button>
                    </div>
                </div>
                
                <div class="textbooks-grid">
                    {% for textbook in textbooks %}
                    <div class="textbook-card">
                        <div class="textbook-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                            </svg>
                        </div>
                        <h3>{{ textbook.title }} ({{ textbook.grade }} класс)</h3>
                        <p>{{ textbook.description }}</p>
                        <a href="{{ url_for('textbook_tasks', textbook_id=textbook.id) }}" class="btn btn-primary">Открыть задания</a>
                    </div>
                    {% else %}
                    <div class="no-textbooks">
                        <p>Нет доступных учебников</p>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/manage_tasks.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\student_dashboard.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Панель ученика - Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Math Teaching System</h1>
            </div>
            <div class="header-right">
                <span class="user-greeting">Здравствуйте, {{ full_name }}</span>
                <a href="{{ url_for('logout') }}" class="btn btn-logout">Выйти</a>
            </div>
        </header>
        
        <main class="dashboard-main">
            <div class="welcome-section">
                <h2>Выберите предмет для работы</h2>
                <p>Решайте задачи вместе с классом, анализируйте решения у доски и применяйте к своим примерам</p>
            </div>
            
            <div class="subjects-grid">
                <div class="subject-card">
                    <div class="subject-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                        </svg>
                    </div>
                    <h3>Мои уроки</h3>
                    <p>Все доступные уроки вашего класса</p>
                    <a href="{{ url_for('student_lessons') }}" class="btn btn-subject">Открыть</a>
                </div>
                
                {% for subject in subjects %}
                <div class="subject-card">
                    <div class="subject-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                        </svg>
                    </div>
                    <h3>{{ subject['name'] }}</h3>
                    <p>{{ subject['description'] }}</p>
                    <a href="#" class="btn btn-subject">Выбрать</a>
                </div>
                {% endfor %}
            </div>
        </main>
    </div>
</body>
</html>
================================================================================
ФАЙЛ: templates\student_lesson.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ lesson.title }} | Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/lesson.css') }}" rel="stylesheet">
</head>
<body>
    <div class="lesson-container">
        <header class="lesson-header">
            <div class="header-content">
                <h1>{{ lesson.title }}</h1>
                <div class="lesson-meta">
                    <span class="date">{{ lesson.date }}</span>
                    <span class="teacher">Учитель: {{ lesson.teacher_name }}</span>
                </div>
            </div>
            <a href="{{ url_for('student_lessons') }}" class="btn btn-back">← Назад к урокам</a>
        </header>

        <main class="lesson-content">
            <div class="tasks-container">
                {% for task in tasks %}
                <div class="task-card" data-task-id="{{ task.id }}" data-user-id="{{ user_id }}">
                    <div class="task-header">
                        <div class="task-number">Задание {{ loop.index }}</div>
                        <div class="task-status"></div>
                    </div>
                    <div class="task-body">
                        <div class="task-question">
                            {{ task.question|safe }}
                        </div>
                        <div class="task-answer">
                            <input type="text" class="answer-input" placeholder="Введите ваш ответ">
                            <button class="btn btn-check">Проверить</button>
                        </div>
                        <div class="task-feedback hidden">
                            <div class="feedback-correct hidden">
                                <span class="icon">✓</span>
                                <span>Правильно!</span>
                            </div>
                            <div class="feedback-incorrect hidden">
                                <span class="icon">✗</span>
                                <span>Ошибка! Правильный ответ: <span class="correct-answer">{{ task.correct_answer }}</span></span>
                                <button class="btn btn-hint">Показать решение</button>
                            </div>
                            <div class="task-hint hidden">
                                {{ task.answer|replace('*', '×')|replace('/', '÷') }}
                            </div>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>

            <div class="lesson-progress">
                <h3>Ваш прогресс</h3>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 0%"></div>
                </div>
                <div class="progress-text">0 из {{ tasks|length }} заданий</div>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/student_lesson.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\student_lessons.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Мои уроки | Math Teaching System</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Мои уроки</h1>
            </div>
            <div class="header-right">
                <span class="user-greeting">{{ full_name }}</span>
                <a href="{{ url_for('logout') }}" class="btn btn-logout">Выйти</a>
            </div>
        </header>

        <main class="dashboard-main">
            <div class="lessons-list">
                <h2>Доступные уроки</h2>
                <div class="lessons-container">
                    {% for lesson in lessons %}
                    <div class="lesson-card">
                        <div class="lesson-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                            </svg>
                        </div>
                        <div class="lesson-info">
                            <h3>{{ lesson.title }}</h3>
                            <p>Дата: {{ lesson.date }}</p>
                            <p>Учитель: {{ lesson.teacher_name }}</p>
                        </div>
                        <div class="lesson-actions">
                            <a href="{{ url_for('start_lesson', lesson_id=lesson.id) }}" class="btn btn-primary">Начать урок</a>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </main>
    </div>
</body>
</html>
================================================================================
ФАЙЛ: templates\teacher_create_lesson.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Создание урока | Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Создание урока для {{ class_name }}</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="create-lesson-container">
            <!-- Блок ручного создания -->
            <div class="manual-creation">
                <h2>Добавить задания</h2>
                <div id="tasksContainer">
                    <!-- Задания будут добавляться здесь -->
                </div>
                <button id="addTaskBtn" class="btn btn-primary">+ Добавить задание</button>
            </div>

            <!-- Блок генерации через ИИ -->
            <div class="ai-generation">
                <h2>Генерация через DeepSeek</h2>
                <textarea id="aiPrompt" placeholder="Опишите задание (например: '5 задач на дроби для 5 класса')"></textarea>
                <button id="generateWithAI" class="btn btn-ai">Сгенерировать задания</button>
                <div id="aiResults" class="hidden">
                    <h3>Результаты:</h3>
                    <div id="aiTasksList"></div>
                    <button id="addAiTasks" class="btn btn-primary">Добавить выбранные</button>
                </div>
            </div>

            <!-- Кнопки сохранения -->
            <div class="save-actions">
                <button id="saveLessonBtn" class="btn btn-save">Сохранить урок</button>
                <button id="previewLessonBtn" class="btn btn-secondary">Предпросмотр</button>
            </div>
        </main>
    </div>

    <!-- Шаблон задания -->
    <template id="taskTemplate">
        <div class="task-card">
            <div class="task-header">
                <h3>Задание <span class="task-number">1</span></h3>
                <button class="btn-remove-task">×</button>
            </div>
            <textarea class="task-text" placeholder="Введите текст задания (используйте {A}, {B}...):"></textarea>
            <div class="task-preview hidden">
                <h4>Примеры для учеников:</h4>
                <div class="preview-examples"></div>
            </div>
            <button class="btn-preview-task">Показать примеры</button>
        </div>
    </template>

    <script src="{{ url_for('static', filename='js/teacher_create_lesson.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\teacher_dashboard.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Панель учителя - Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Math Teaching System</h1>
            </div>
            <div class="header-right">
                <span class="user-greeting">Здравствуйте, {{ full_name }}</span>
                <a href="{{ url_for('logout') }}" class="btn btn-logout">Выйти</a>
            </div>
        </header>
        
        <main class="dashboard-main teacher-dashboard">
            <div class="welcome-section">
                <h2>Панель управления учителя</h2>
                <p>Здесь вы можете создавать задания и управлять уроками</p>
            </div>
            
            <div class="teacher-actions">
                <div class="action-card">
                    <h3>Управление учениками</h3>
                    <p>Добавляйте и удаляйте учеников, назначайте классы</p>
                    <a href="{{ url_for('manage_students') }}" class="btn btn-action">Управление учениками</a>
                </div>

                <div class="action-card">
                    <h3>Управление заданиями</h3>
                    <p>Создавайте и редактируйте задания из учебников</p>
                    <a href="{{ url_for('manage_tasks') }}" class="btn btn-action">Управление заданиями</a>
                </div>
            </div>
            
            <div class="class-selection">
                <h3>Выберите класс для работы:</h3>
                
                <div class="grade-buttons">
                    {% for grade in range(5, 12) %}
                        <button class="btn-grade" data-grade="{{ grade }}">{{ grade }} класс</button>
                    {% endfor %}
                </div>
                
                <div class="letter-buttons hidden">
                    <h4>Выберите букву класса:</h4>
                    {% for letter in ['А', 'Б', 'В', 'Г', 'Д'] %}
                        <button class="btn-letter" data-letter="{{ letter }}">{{ letter }}</button>
                    {% endfor %}
                </div>
                
                <button id="createNewLesson" class="btn btn-primary hidden">Создать новый урок</button>
            </div>

                
            <div class="lessons-list hidden">
                <h3>Созданные уроки</h3>
                <div class="lessons-container">
                    <!-- Уроки будут добавляться динамически -->
                </div>
            </div>

        </main>
    </div>

    <!-- Модальное окно создания урока -->
    <div id="lessonModal" class="modal hidden">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Создание нового урока</h2>
            
            <div class="form-group">
                <label for="lessonTitle">Название урока:</label>
                <input type="text" id="lessonTitle" placeholder="Введите название урока">
            </div>
            
            <div class="form-group">
                <label for="lessonDate">Дата урока:</label>
                <input type="date" id="lessonDate" value="{{ today_date }}">
            </div>
            
            <button id="saveLesson" class="btn btn-primary">Создать урок</button>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/teacher.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: templates\textbook_tasks.html
================================================================================
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{{ textbook.title }} - Управление заданиями</title>
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>{{ textbook.title }} ({{ textbook.grade }} класс)</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('manage_tasks') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="textbook-tasks-container" data-textbook-id="{{ textbook.id }}">
            <div class="section-header">
                <h2>Шаблоны заданий</h2>
                <button id="showFormBtn" class="btn btn-primary">+ Добавить шаблон</button>
            </div>

            <!-- Форма добавления -->
            <div id="taskForm" class="task-form hidden">
                <h3>Новый шаблон задания</h3>
                <div class="form-group">
                    <label>Название:</label>
                    <input type="text" id="templateName" class="form-control" required>
                </div>
                <div class="form-group">
                    <label>Шаблон вопроса:</label>
                    <textarea id="questionTemplate" class="form-control" required></textarea>
                    <small class="form-hint">Используйте {A}, {B} для параметров</small>
                </div>
                <div class="form-group">
                    <label>Формула ответа:</label>
                    <textarea id="answerTemplate" class="form-control" required></textarea>
                    <small class="form-hint">Пример: {A} + {B}</small>
                </div>
                <div id="paramsContainer" class="params-container"></div>
                <div class="form-actions">
                    <button id="saveTemplateBtn" class="btn btn-primary">Сохранить</button>
                    <button id="cancelBtn" class="btn btn-secondary">Отмена</button>
                </div>
            </div>

            <!-- Список шаблонов -->
            <div id="templatesList" class="templates-list">
                {% for template in templates %}
                <div class="template-card" data-id="{{ template.id }}">
                    <div class="template-header">
                        <h3>№{{ loop.index }}: {{ template.name }}</h3>
                        <div class="template-actions">
                            <button class="btn-icon edit-btn">✏️</button>
                            <button class="btn-icon delete-btn">🗑️</button>
                        </div>
                    </div>
                    <div class="template-content">
                        <p><strong>Вопрос:</strong> {{ template.question_template }}</p>
                        <p><strong>Ответ:</strong> {{ template.answer_template }}</p>
                    </div>
                </div>
                {% else %}
                <p class="no-templates">Нет созданных шаблонов</p>
                {% endfor %}
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/textbook_tasks.js') }}"></script>
</body>
</html>
================================================================================
ФАЙЛ: utils\task_generator.py
================================================================================
# utils/task_generator.py
import random
import re
import json
from typing import Dict, Any, List, Tuple

class TaskGenerator:
    @staticmethod
    def generate_task_variant(question: str, answer_template: str, parameters: dict) -> dict:
        # 1. Генерируем значения параметров
        params = {k: random.randint(v['min'], v['max']) for k, v in parameters.items()}
        
        # 2. Формируем вопрос с подставленными значениями
        generated_question = question
        for param, value in params.items():
            generated_question = generated_question.replace(f'{{{param}}}', str(value))
        
        # 3. Вычисляем ответ
        try:
            # Создаем локальные переменные для eval
            locals().update(params)
            
            # Вычисляем ответ (убираем фигурные скобки из шаблона)
            expr = answer_template.replace('{', '').replace('}', '')
            computed_answer = str(eval(expr, {}, locals()))
        except Exception as e:
            computed_answer = f"Error: {str(e)}"
        
        return {
            'question': generated_question,
            'correct_answer': computed_answer,
            'params': params
        }

    @staticmethod
    def extract_parameters(template: str) -> List[str]:
        """Извлекает список параметров из шаблона"""
        return list(set(re.findall(r'\{([A-Za-z]+)\}', template)))