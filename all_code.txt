

================================================================================
Ф: C:\Users\yatma\Pictures\Urok\static\css\style.css
: 9977 bytes
Т : 05/02/2025 15:34:23
================================================================================


:root {
    --primary-color: #4a6bff;
    --secondary-color: #f5f7ff;
    --error-color: #ff4757;
    --success-color: #2ed573;
    --text-color: #2f3542;
    --light-text: #747d8c;
    --white: #ffffff;
    --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
}

body {
    background-color: #f1f2f6;
    color: var(--text-color);
    line-height: 1.6;
}

/* Auth Styles */
.auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.auth-card {
    background: var(--white);
    border-radius: 10px;
    box-shadow: var(--shadow);
    padding: 30px;
    width: 100%;
    max-width: 450px;
}

.auth-header {
    text-align: center;
    margin-bottom: 30px;
}

.auth-logo {
    width: 80px;
    height: 80px;
    margin-bottom: 15px;
}

.auth-header h1 {
    font-size: 24px;
    font-weight: 700;
    margin-bottom: 5px;
}

.auth-header p {
    color: var(--light-text);
    font-size: 14px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}

.form-group input {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
    transition: border 0.3s;
}

.form-group input:focus {
    border-color: var(--primary-color);
    outline: none;
}

.btn {
    display: inline-block;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    text-align: center;
    transition: all 0.3s;
    text-decoration: none;
}

.btn-primary {
    background-color: var(--primary-color);
    color: var(--white);
    width: 100%;
}

.btn-primary:hover {
    background-color: #3a56e0;
}

.alert {
    padding: 12px;
    border-radius: 5px;
    margin-bottom: 20px;
    font-size: 14px;
}

.alert-error {
    background-color: #ffebee;
    color: var(--error-color);
    border: 1px solid #ffcdd2;
}

.auth-footer {
    margin-top: 20px;
    text-align: center;
    font-size: 14px;
    color: var(--light-text);
}

/* Dashboard Styles */
.dashboard-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

.dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 30px;
    background-color: var(--white);
    box-shadow: var(--shadow);
}

.header-left {
    display: flex;
    align-items: center;
}

.header-logo {
    width: 40px;
    height: 40px;
    margin-right: 15px;
}

.header-right {
    display: flex;
    align-items: center;
}

.user-greeting {
    margin-right: 20px;
    font-weight: 500;
}

.btn-logout {
    background-color: var(--secondary-color);
    color: var(--primary-color);
}

.btn-logout:hover {
    background-color: #e0e5ff;
}

.dashboard-main {
    flex: 1;
    padding: 30px;
}

.welcome-section {
    text-align: center;
    margin-bottom: 40px;
}

.welcome-section h2 {
    font-size: 28px;
    margin-bottom: 10px;
}

.welcome-section p {
    color: var(--light-text);
    max-width: 600px;
    margin: 0 auto;
}

.subjects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 30px;
}

.subject-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    text-align: center;
    transition: transform 0.3s;
}

.subject-card:hover {
    transform: translateY(-5px);
}

.subject-icon {
    width: 60px;
    height: 60px;
    margin: 0 auto 15px;
    background-color: var(--secondary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.subject-icon svg {
    width: 30px;
    height: 30px;
    color: var(--primary-color);
}

.subject-card h3 {
    margin-bottom: 10px;
    font-size: 20px;
}

.subject-card p {
    color: var(--light-text);
    margin-bottom: 20px;
    font-size: 14px;
}

.btn-subject {
    background-color: var(--primary-color);
    color: var(--white);
    padding: 8px 20px;
    font-size: 14px;
}

/* Teacher Dashboard */
.teacher-dashboard .welcome-section {
    text-align: left;
    margin-bottom: 30px;
}

.teacher-actions {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

.action-card {
    background: var(--white);
    border-radius: 10px;
    padding: 25px;
    box-shadow: var(--shadow);
    transition: transform 0.3s;
}

.action-card:hover {
    transform: translateY(-5px);
}

.action-card h3 {
    margin-bottom: 10px;
    font-size: 18px;
}

.action-card p {
    color: var(--light-text);
    margin-bottom: 20px;
    font-size: 14px;
}

.btn-action {
    background-color: var(--primary-color);
    color: var(--white);
    padding: 8px 20px;
    font-size: 14px;
}
/* Добавляем в style.css */
.class-selection {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
}

.grade-buttons, .letter-buttons {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    margin: 15px 0;
}

.btn-grade, .btn-letter {
    padding: 8px 15px;
    background: var(--secondary-color);
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;
}

.btn-grade:hover, .btn-letter:hover {
    background: #d0d8ff;
}

.btn-grade.active, .btn-letter.active {
    background: var(--primary-color);
    color: white;
}

.hidden {
    display: none;
}

/* Модальное окно */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    padding: 25px;
    border-radius: 8px;
    width: 80%;
    max-width: 700px;
    max-height: 90vh;
    overflow-y: auto;
}

.close {
    float: right;
    font-size: 24px;
    cursor: pointer;
}

.task-template textarea {
    width: 100%;
    min-height: 100px;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.parameters {
    margin: 15px 0;
}

.param-control {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
    align-items: center;
}

.param-control input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.btn-small {
    padding: 5px 10px;
    font-size: 14px;
}
/* Стили для модального окна */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal.hidden {
    display: none;
}

.modal:not(.hidden) {
    display: flex;
}

.modal-content {
    background: white;
    padding: 25px;
    border-radius: 8px;
    width: 90%;
    max-width: 600px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

/* Стили для параметров */
.param-row {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
}

.param-row input {
    width: 80px;
    padding: 6px;
}

.btn-remove-param {
    background: #ff4757;
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    cursor: pointer;
}

/* Стили для списка уроков */
.lessons-list {
    margin-top: 30px;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: var(--shadow);
}

.lessons-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 15px;
}

.lesson-card {
    display: flex;
    flex-direction: column;
    background: var(--secondary-color);
    padding: 15px;
    border-radius: 8px;
    transition: transform 0.3s;
}

.lesson-card:hover {
    transform: translateY(-3px);
}

.lesson-icon {
    width: 40px;
    height: 40px;
    background: var(--primary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
}

.lesson-icon svg {
    width: 20px;
    height: 20px;
    color: white;
}

.lesson-info h4 {
    margin-bottom: 5px;
}

.lesson-info p {
    color: var(--light-text);
    font-size: 14px;
}

.lesson-actions {
    margin-top: 15px;
    display: flex;
    gap: 10px;
}

.btn-small {
    padding: 6px 12px;
    font-size: 14px;
}

.edit-lesson-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.lesson-meta {
    background: var(--secondary-color);
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.tasks-section {
    margin-top: 30px;
}

.task-card {
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 15px;
}

.task-question, .task-answer {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    min-height: 60px;
}

.btn-remove-task {
    background: var(--error-color);
    color: white;
}

.save-actions {
    margin-top: 30px;
    text-align: center;
}

.btn-save {
    background: var(--success-color);
    padding: 12px 30px;
}


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\static\js\edit_lesson.js
: 3127 bytes
Т : 05/02/2025 15:34:01
================================================================================


document.addEventListener('DOMContentLoaded', function() {
    const tasksContainer = document.getElementById('tasksContainer');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const saveLessonBtn = document.getElementById('saveLessonBtn');
    const lessonId = window.location.pathname.split('/').pop();

    // Добавление нового задания
    addTaskBtn.addEventListener('click', function() {
        const taskCard = document.createElement('div');
        taskCard.className = 'task-card';
        taskCard.innerHTML = `
            <textarea class="task-question" placeholder="Введите вопрос"></textarea>
            <textarea class="task-answer" placeholder="Введите ответ"></textarea>
            <button class="btn btn-danger btn-remove-task">Удалить</button>
        `;
        tasksContainer.appendChild(taskCard);
    });

    // Удаление задания
    tasksContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('btn-remove-task')) {
            const taskCard = e.target.closest('.task-card');
            const taskId = taskCard.dataset.taskId;
            
            if (taskId) {
                // Если задание уже есть в БД - удаляем
                fetch(`/teacher/delete_task/${taskId}`, {
                    method: 'DELETE'
                }).then(response => {
                    if (!response.ok) throw new Error('Ошибка удаления');
                    taskCard.remove();
                });
            } else {
                // Если задание новое - просто удаляем из DOM
                taskCard.remove();
            }
        }
    });

    // Сохранение изменений
    saveLessonBtn.addEventListener('click', function() {
        const tasks = [];
        document.querySelectorAll('.task-card').forEach(taskCard => {
            tasks.push({
                id: taskCard.dataset.taskId || null,
                question: taskCard.querySelector('.task-question').value,
                answer: taskCard.querySelector('.task-answer').value
            });
        });

        fetch(`/teacher/update_lesson/${lessonId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ tasks: tasks })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Изменения сохранены!');
                // Обновляем ID новых заданий
                data.tasks.forEach((task, index) => {
                    if (!tasks[index].id) {
                        document.querySelectorAll('.task-card')[index].dataset.taskId = task.id;
                    }
                });
            } else {
                alert('Ошибка сохранения: ' + (data.error || ''));
            }
        });
    });
});


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\static\js\teacher.js
: 5705 bytes
Т : 05/02/2025 15:48:01
================================================================================


document.addEventListener('DOMContentLoaded', function() {
    // Элементы интерфейса
    const gradeButtons = document.querySelectorAll('.btn-grade');
    const letterButtons = document.querySelector('.letter-buttons');
    const createBtn = document.getElementById('createNewLesson');
    const modal = document.getElementById('lessonModal');
    const closeBtn = document.querySelector('.close');
    const saveLessonBtn = document.getElementById('saveLesson');
    
    let selectedGrade = null;
    let selectedLetter = null;

    // 1. Выбор класса (5-11)
    gradeButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            gradeButtons.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            selectedGrade = this.dataset.grade;
            letterButtons.classList.remove('hidden');
            createBtn.classList.add('hidden');
        });
    });

    // 2. Выбор буквы класса (А-Д)
    document.querySelectorAll('.btn-letter').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.btn-letter').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            selectedLetter = this.dataset.letter;
            createBtn.classList.remove('hidden');
            loadLessons(selectedGrade, selectedLetter);
        });
    });

    // 3. Открытие модального окна
    createBtn.addEventListener('click', function() {
        // Устанавливаем сегодняшнюю дату по умолчанию
        document.getElementById('lessonDate').value = new Date().toISOString().split('T')[0];
        modal.classList.remove('hidden');
    });

    // 4. Закрытие модального окна
    function closeModal() {
        modal.classList.add('hidden');
    }
    
    closeBtn.addEventListener('click', closeModal);
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            closeModal();
        }
    });

    // 5. Сохранение урока
    saveLessonBtn.addEventListener('click', async function() {
        const title = document.getElementById('lessonTitle').value.trim();
        const date = document.getElementById('lessonDate').value;
        
        if (!title) {
            alert('Введите название урока');
            return;
        }

        try {
            const response = await fetch('/teacher/create_lesson', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    grade: `${selectedGrade}${selectedLetter}`,
                    title: title,
                    date: date
                })
            });

            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error || 'Ошибка сервера');
            }

            if (data.success && data.lesson_id) {
                // Перенаправляем на страницу редактирования
                window.location.href = `/teacher/edit_lesson/${data.lesson_id}`;
            } else {
                throw new Error('Не удалось создать урок');
            }
        } catch (error) {
            console.error('Error:', error);
            alert(`Ошибка создания урока: ${error.message}`);
        }
    });

    // Функция для загрузки уроков класса
    async function loadLessons(grade, letter) {
        try {
            const response = await fetch(`/teacher/get_lessons?grade=${grade}${letter}`);
            const data = await response.json();
            
            const container = document.querySelector('.lessons-container');
            container.innerHTML = '';
            
            if (!data.lessons || data.lessons.length === 0) {
                container.innerHTML = '<p>Нет созданных уроков</p>';
                return;
            }
            
            data.lessons.forEach(lesson => {
                const lessonElement = document.createElement('div');
                lessonElement.className = 'lesson-card';
                lessonElement.innerHTML = `
                    <div class="lesson-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                        </svg>
                    </div>
                    <div class="lesson-info">
                        <h4>${lesson.title}</h4>
                        <p>${lesson.date}</p>
                    </div>
                    <div class="lesson-actions">
                        <a href="/teacher/conduct_lesson/${lesson.id}" class="btn btn-small">Войти в урок</a>
                        <a href="/teacher/edit_lesson/${lesson.id}" class="btn btn-small btn-secondary">Редактировать</a>
                    </div>
                `;
                container.appendChild(lessonElement);
            });
            
            document.querySelector('.lessons-list').classList.remove('hidden');
        } catch (error) {
            console.error('Error loading lessons:', error);
        }
    }
});


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\static\js\teacher_create_lesson.js
: 7072 bytes
Т : 04/26/2025 20:46:17
================================================================================


document.addEventListener('DOMContentLoaded', function() {
    // Элементы
    const tasksContainer = document.getElementById('tasksContainer');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const saveLessonBtn = document.getElementById('saveLessonBtn');
    const previewLessonBtn = document.getElementById('previewLessonBtn');
    const generateWithAIBtn = document.getElementById('generateWithAI');
    const aiPrompt = document.getElementById('aiPrompt');
    const aiResults = document.getElementById('aiResults');
    const aiTasksList = document.getElementById('aiTasksList');
    const addAiTasksBtn = document.getElementById('addAiTasks');
    const taskTemplate = document.getElementById('taskTemplate');

    // Добавление нового задания
    function addTask(taskText = '') {
        const taskClone = taskTemplate.content.cloneNode(true);
        const taskElement = taskClone.querySelector('.task-card');
        const taskNumber = tasksContainer.children.length + 1;
        
        taskClone.querySelector('.task-number').textContent = taskNumber;
        if (taskText) {
            taskClone.querySelector('.task-text').value = taskText;
        }
        
        // Кнопка удаления
        taskClone.querySelector('.btn-remove-task').addEventListener('click', function() {
            tasksContainer.removeChild(taskElement);
            updateTaskNumbers();
        });
        
        // Превью примеров
        taskClone.querySelector('.btn-preview-task').addEventListener('click', function() {
            const previewDiv = taskElement.querySelector('.task-preview');
            previewDiv.classList.toggle('hidden');
            
            if (!previewDiv.classList.contains('hidden')) {
                generateExamples(taskElement);
            }
        });
        
        tasksContainer.appendChild(taskClone);
    }

    // Обновление нумерации заданий
    function updateTaskNumbers() {
        Array.from(tasksContainer.children).forEach((task, index) => {
            task.querySelector('.task-number').textContent = index + 1;
        });
    }

    // Генерация примеров для задания
    function generateExamples(taskElement) {
        const taskText = taskElement.querySelector('.task-text').value;
        const examplesDiv = taskElement.querySelector('.preview-examples');
        examplesDiv.innerHTML = '';
        
        if (!taskText) return;
        
        // Находим параметры {A}, {B}...
        const params = [...new Set(taskText.match(/\{([A-Z])\}/g))].map(p => p.replace(/\{|\}/g, ''));
        
        // Генерируем 3 примера
        for (let i = 0; i < 3; i++) {
            const example = { ...taskText };
            const values = {};
            
            // Заполняем параметры случайными значениями
            params.forEach(param => {
                values[param] = getRandomInt(1, 10);
                example = example.replace(new RegExp(`\\{${param}\\}`, 'g'), values[param]);
            });
            
            const exampleDiv = document.createElement('div');
            exampleDiv.className = 'example';
            exampleDiv.textContent = example;
            examplesDiv.appendChild(exampleDiv);
        }
    }

    // Генерация через DeepSeek
    generateWithAIBtn.addEventListener('click', async function() {
        if (!aiPrompt.value.trim()) {
            alert('Введите описание заданий');
            return;
        }
        
        generateWithAIBtn.disabled = true;
        generateWithAIBtn.textContent = 'Генерация...';
        
        try {
            const response = await fetch('/teacher/generate_with_ai', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: aiPrompt.value })
            });
            
            const data = await response.json();
            displayAITasks(data.tasks);
        } catch (error) {
            console.error('AI generation error:', error);
            alert('Ошибка генерации');
        } finally {
            generateWithAIBtn.disabled = false;
            generateWithAIBtn.textContent = 'Сгенерировать задания';
        }
    });

    // Отображение результатов ИИ
    function displayAITasks(tasks) {
        aiTasksList.innerHTML = '';
        tasks.forEach(task => {
            const taskDiv = document.createElement('div');
            taskDiv.className = 'ai-task';
            taskDiv.innerHTML = `
                <input type="checkbox" checked>
                <div class="ai-task-text">${task}</div>
            `;
            aiTasksList.appendChild(taskDiv);
        });
        aiResults.classList.remove('hidden');
    }

    // Добавление выбранных заданий от ИИ
    addAiTasksBtn.addEventListener('click', function() {
        document.querySelectorAll('.ai-task input:checked').forEach(checkbox => {
            const taskText = checkbox.nextElementSibling.textContent;
            addTask(taskText);
        });
        aiResults.classList.add('hidden');
    });

    // Сохранение урока
    saveLessonBtn.addEventListener('click', function() {
        const tasks = [];
        document.querySelectorAll('.task-card').forEach(task => {
            tasks.push({
                text: task.querySelector('.task-text').value,
                params: [...new Set(task.querySelector('.task-text').value.match(/\{([A-Z])\}/g))]
                    .map(p => p.replace(/\{|\}/g, ''))
            });
        });
        
        if (tasks.length === 0) {
            alert('Добавьте хотя бы одно задание');
            return;
        }
        
        fetch('/teacher/save_lesson', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                class_name: '{{ class_name }}',
                tasks: tasks
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.href = '/teacher/dashboard';
            } else {
                alert('Ошибка сохранения: ' + (data.error || ''));
            }
        });
    });

    // Вспомогательные функции
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // Инициализация
    addTaskBtn.addEventListener('click', () => addTask());
    addTask(); // Добавляем первое задание по умолчанию
});


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\templates\auth.html
: 1957 bytes
Т : 04/26/2025 20:01:13
================================================================================


<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Math Teaching System - Авторизация</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="auth-logo">
                <h1>Math Teaching System</h1>
                <p>Система интерактивного обучения математике</p>
            </div>
            
            <form id="loginForm" method="POST" action="{{ url_for('login') }}">
                {% if error %}
                <div class="alert alert-error">{{ error }}</div>
                {% endif %}
                
                <div class="form-group">
                    <label for="username">Имя пользователя</label>
                    <input type="text" id="username" name="username" required>
                </div>
                
                <div class="form-group">
                    <label for="password">Пароль</label>
                    <input type="password" id="password" name="password" required>
                </div>
                
                <button type="submit" class="btn btn-primary">Войти</button>
            </form>
            
            <div class="auth-footer">
                <p>Нет аккаунта? Обратитесь к администратору</p>
            </div>
        </div>
    </div>
    
    <script src="{{ url_for('static', filename='js/auth.js') }}"></script>
</body>
</html>


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\templates\conduct_lesson.html
: 1319 bytes
Т : 05/02/2025 15:12:35
================================================================================


<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ход урока | Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Ход урока</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="conduct-lesson-container">
            <div class="lesson-content">
                <!-- Здесь будет содержимое урока -->
                <h2>Урок в процессе</h2>
                <p>Здесь будет интерфейс для проведения урока</p>
            </div>
        </main>
    </div>
</body>
</html>


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\templates\edit_lesson.html
: 2266 bytes
Т : 05/02/2025 15:33:41
================================================================================


<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Редактирование урока | Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Редактирование урока: {{ lesson.title }}</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="edit-lesson-container">
            <div class="lesson-meta">
                <h3>Класс: {{ lesson.grade }}</h3>
                <p>Дата проведения: {{ lesson.date }}</p>
            </div>

            <div class="tasks-section">
                <h2>Задания урока</h2>
                <div id="tasksContainer">
                    {% for task in tasks %}
                    <div class="task-card" data-task-id="{{ task.id }}">
                        <textarea class="task-question">{{ task.question }}</textarea>
                        <textarea class="task-answer">{{ task.answer }}</textarea>
                        <button class="btn btn-danger btn-remove-task">Удалить</button>
                    </div>
                    {% endfor %}
                </div>
                <button id="addTaskBtn" class="btn btn-primary">+ Добавить задание</button>
            </div>

            <div class="save-actions">
                <button id="saveLessonBtn" class="btn btn-save">Сохранить изменения</button>
            </div>
        </main>
    </div>

    <script src="{{ url_for('static', filename='js/edit_lesson.js') }}"></script>
</body>
</html>


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\templates\student_dashboard.html
: 2172 bytes
Т : 04/26/2025 20:01:21
================================================================================


<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Панель ученика - Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Math Teaching System</h1>
            </div>
            <div class="header-right">
                <span class="user-greeting">Здравствуйте, {{ full_name }}</span>
                <a href="{{ url_for('logout') }}" class="btn btn-logout">Выйти</a>
            </div>
        </header>
        
        <main class="dashboard-main">
            <div class="welcome-section">
                <h2>Выберите предмет для работы</h2>
                <p>Решайте задачи вместе с классом, анализируйте решения у доски и применяйте к своим примерам</p>
            </div>
            
            <div class="subjects-grid">
                {% for subject in subjects %}
                <div class="subject-card">
                    <div class="subject-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 12h3v9h6v-6h4v6h6v-9h3L12 2zm0 2.8L18 10v9h-2v-6H8v6H6v-9l6-7.2z"/>
                        </svg>
                    </div>
                    <h3>{{ subject['name'] }}</h3>
                    <p>{{ subject['description'] }}</p>
                    <a href="#" class="btn btn-subject">Выбрать</a>
                </div>
                {% endfor %}
            </div>
        </main>
    </div>
</body>
</html>


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\templates\teacher_create_lesson.html
: 3464 bytes
Т : 04/26/2025 20:46:07
================================================================================


<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Создание урока | Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Создание урока для {{ class_name }}</h1>
            </div>
            <div class="header-right">
                <a href="{{ url_for('teacher_dashboard') }}" class="btn btn-secondary">← Назад</a>
            </div>
        </header>

        <main class="create-lesson-container">
            <!-- Блок ручного создания -->
            <div class="manual-creation">
                <h2>Добавить задания</h2>
                <div id="tasksContainer">
                    <!-- Задания будут добавляться здесь -->
                </div>
                <button id="addTaskBtn" class="btn btn-primary">+ Добавить задание</button>
            </div>

            <!-- Блок генерации через ИИ -->
            <div class="ai-generation">
                <h2>Генерация через DeepSeek</h2>
                <textarea id="aiPrompt" placeholder="Опишите задание (например: '5 задач на дроби для 5 класса')"></textarea>
                <button id="generateWithAI" class="btn btn-ai">Сгенерировать задания</button>
                <div id="aiResults" class="hidden">
                    <h3>Результаты:</h3>
                    <div id="aiTasksList"></div>
                    <button id="addAiTasks" class="btn btn-primary">Добавить выбранные</button>
                </div>
            </div>

            <!-- Кнопки сохранения -->
            <div class="save-actions">
                <button id="saveLessonBtn" class="btn btn-save">Сохранить урок</button>
                <button id="previewLessonBtn" class="btn btn-secondary">Предпросмотр</button>
            </div>
        </main>
    </div>

    <!-- Шаблон задания -->
    <template id="taskTemplate">
        <div class="task-card">
            <div class="task-header">
                <h3>Задание <span class="task-number">1</span></h3>
                <button class="btn-remove-task">×</button>
            </div>
            <textarea class="task-text" placeholder="Введите текст задания (используйте {A}, {B}...):"></textarea>
            <div class="task-preview hidden">
                <h4>Примеры для учеников:</h4>
                <div class="preview-examples"></div>
            </div>
            <button class="btn-preview-task">Показать примеры</button>
        </div>
    </template>

    <script src="{{ url_for('static', filename='js/teacher_create_lesson.js') }}"></script>
</body>
</html>


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\templates\teacher_dashboard.html
: 3598 bytes
Т : 05/02/2025 15:10:43
================================================================================


<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Панель учителя - Math Teaching System</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <header class="dashboard-header">
            <div class="header-left">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="Логотип" class="header-logo">
                <h1>Math Teaching System</h1>
            </div>
            <div class="header-right">
                <span class="user-greeting">Здравствуйте, {{ full_name }}</span>
                <a href="{{ url_for('logout') }}" class="btn btn-logout">Выйти</a>
            </div>
        </header>
        
        <main class="dashboard-main teacher-dashboard">
            <div class="welcome-section">
                <h2>Панель управления учителя</h2>
                <p>Здесь вы можете создавать задания и управлять уроками</p>
            </div>
            
            <div class="class-selection">
                <h3>Выберите класс для работы:</h3>
                
                <div class="grade-buttons">
                    {% for grade in range(5, 12) %}
                        <button class="btn-grade" data-grade="{{ grade }}">{{ grade }} класс</button>
                    {% endfor %}
                </div>
                
                <div class="letter-buttons hidden">
                    <h4>Выберите букву класса:</h4>
                    {% for letter in ['А', 'Б', 'В', 'Г', 'Д'] %}
                        <button class="btn-letter" data-letter="{{ letter }}">{{ letter }}</button>
                    {% endfor %}
                </div>
                
                <button id="createNewLesson" class="btn btn-primary hidden">Создать новый урок</button>
            </div>

            <div class="lessons-list hidden">
                <h3>Созданные уроки</h3>
                <div class="lessons-container">
                    <!-- Уроки будут добавляться динамически -->
                </div>
            </div>

        </main>
    </div>

    <!-- Модальное окно создания урока -->
    <div id="lessonModal" class="modal hidden">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Создание нового урока</h2>
            
            <div class="form-group">
                <label for="lessonTitle">Название урока:</label>
                <input type="text" id="lessonTitle" placeholder="Введите название урока">
            </div>
            
            <div class="form-group">
                <label for="lessonDate">Дата урока:</label>
                <input type="date" id="lessonDate" value="{{ today_date }}">
            </div>
            
            <button id="saveLesson" class="btn btn-primary">Создать урок</button>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/teacher.js') }}"></script>
</body>
</html>


================================================================================
Ф: C:\Users\yatma\Pictures\Urok\app.py
: 10194 bytes
Т : 05/02/2025 15:34:46
================================================================================


from flask import Flask, render_template, request, redirect, url_for, session, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'

# Конфигурация БД
DATABASE = 'database.db'

def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    # Создаем таблицу пользователей
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        role TEXT NOT NULL,  -- 'student' или 'teacher'
        full_name TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS lessons (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        teacher_id INTEGER REFERENCES users(id),
        grade TEXT NOT NULL,
        title TEXT NOT NULL,
        date TEXT NOT NULL,
        template TEXT,
        params TEXT,  -- JSON с параметрами
        answer_logic TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS lesson_tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        lesson_id INTEGER REFERENCES lessons(id),
        question TEXT NOT NULL,
        answer TEXT NOT NULL
    )
''')
    
    # Создаем таблицу предметов
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS subjects (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT
    )
    ''')
    
    # Проверяем, есть ли уже тестовые пользователи
    cursor.execute("SELECT COUNT(*) FROM users")
    if cursor.fetchone()[0] == 0:
        # Добавляем тестовых пользователей
        cursor.execute("INSERT INTO users (username, password, role, full_name) VALUES (?, ?, ?, ?)",
                      ('teacher1', generate_password_hash('teacher123'), 'teacher', 'Иванов Иван Иванович'))
        cursor.execute("INSERT INTO users (username, password, role, full_name) VALUES (?, ?, ?, ?)",
                      ('student1', generate_password_hash('student123'), 'student', 'Петров Петр'))
        
        # Добавляем тестовые предметы
        cursor.execute("INSERT INTO subjects (name, description) VALUES (?, ?)",
                      ('Математика', 'Алгебра и геометрия'))
    
    conn.commit()
    conn.close()



def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def home():
    if 'user_id' in session:
        if session['role'] == 'student':
            return redirect(url_for('student_dashboard'))
        else:
            return redirect(url_for('teacher_dashboard'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        conn.close()
        
        if user and check_password_hash(user['password'], password):
            session['user_id'] = user['id']
            session['username'] = user['username']
            session['role'] = user['role']
            session['full_name'] = user['full_name']
            
            if user['role'] == 'student':
                return redirect(url_for('student_dashboard'))
            else:
                return redirect(url_for('teacher_dashboard'))
        else:
            return render_template('auth.html', error="Неверное имя пользователя или пароль")
    
    return render_template('auth.html')

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

@app.route('/student/dashboard')
def student_dashboard():
    if 'user_id' not in session or session['role'] != 'student':
        return redirect(url_for('login'))
    
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM subjects")
    subjects = cursor.fetchall()
    conn.close()
    
    return render_template('student_dashboard.html', 
                         full_name=session['full_name'],
                         subjects=subjects)

@app.route('/teacher/dashboard')
def teacher_dashboard():
    if 'user_id' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))
    
    return render_template('teacher_dashboard.html', 
                         full_name=session['full_name'])


@app.route('/teacher/get_lessons')
def get_lessons():
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    grade = request.args.get('grade')
    
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, title, date FROM lessons 
        WHERE teacher_id = ? AND grade = ?
        ORDER BY date DESC
    ''', (session['user_id'], grade))
    lessons = cursor.fetchall()
    conn.close()
    
    return jsonify({
        'lessons': [dict(lesson) for lesson in lessons]
    })

@app.route('/teacher/edit_lesson/<int:lesson_id>')
def edit_lesson(lesson_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))

    conn = get_db()
    cursor = conn.cursor()
    
    # Получаем основную информацию об уроке
    cursor.execute('''
        SELECT id, title, date, grade FROM lessons 
        WHERE id = ? AND teacher_id = ?
    ''', (lesson_id, session['user_id']))
    lesson = cursor.fetchone()
    
    if not lesson:
        return redirect(url_for('teacher_dashboard'))
    
    # Получаем задания для этого урока
    cursor.execute('''
        SELECT id, question, answer FROM lesson_tasks 
        WHERE lesson_id = ?
    ''', (lesson_id,))
    tasks = cursor.fetchall()
    
    conn.close()
    
    return render_template('edit_lesson.html', 
                        lesson=dict(lesson),
                        tasks=[dict(task) for task in tasks],
                        today_date=datetime.now().strftime('%Y-%m-%d'))

@app.route('/teacher/conduct_lesson/<int:lesson_id>')
def conduct_lesson(lesson_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))
    
    # Здесь будет логика для страницы проведения урока
    return render_template('conduct_lesson.html', lesson_id=lesson_id)

# Обновляем create_lesson
@app.route('/teacher/create_lesson', methods=['POST'])
def create_lesson():
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO lessons (teacher_id, grade, title, date)
        VALUES (?, ?, ?, ?)
    ''', (
        session['user_id'],
        data['grade'],
        data['title'],
        data['date']
    ))
    lesson_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    return jsonify({
        'success': True,
        'lesson_id': lesson_id
    })

@app.route('/teacher/update_lesson/<int:lesson_id>', methods=['POST'])
def update_lesson(lesson_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    data = request.get_json()
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Обновляем или добавляем задания
        updated_tasks = []
        for task in data['tasks']:
            if task['id']:
                # Обновление существующего задания
                cursor.execute('''
                    UPDATE lesson_tasks 
                    SET question = ?, answer = ?
                    WHERE id = ? AND lesson_id = ?
                ''', (task['question'], task['answer'], task['id'], lesson_id))
            else:
                # Добавление нового задания
                cursor.execute('''
                    INSERT INTO lesson_tasks (lesson_id, question, answer)
                    VALUES (?, ?, ?)
                ''', (lesson_id, task['question'], task['answer']))
                updated_tasks.append({'id': cursor.lastrowid})
        
        conn.commit()
        return jsonify({'success': True, 'tasks': updated_tasks})
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        conn.close()

@app.route('/teacher/delete_task/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
    if 'user_id' not in session or session['role'] != 'teacher':
        return jsonify({'error': 'Unauthorized'}), 401
    
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # Проверяем, что задание принадлежит учителю
        cursor.execute('''
            DELETE FROM lesson_tasks 
            WHERE id = ? AND lesson_id IN (
                SELECT id FROM lessons WHERE teacher_id = ?
            )
        ''', (task_id, session['user_id']))
        
        conn.commit()
        return jsonify({'success': True})
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        conn.close()

with app.app_context():
    init_db()

if __name__ == '__main__':
    app.run(debug=True)
