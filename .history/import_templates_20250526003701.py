import sqlite3
import json
from pathlib import Path

DB_PATH = 'database.db'
JSON_FILE = 'templates.json'

def validate_template(template):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —à–∞–±–ª–æ–Ω –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º"""
    required_fields = ['textbook_id', 'name', 'question_template', 'answer_template', 'parameters']
    for field in required_fields:
        if field not in template:
            raise ValueError(f"–®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ '{field}'")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for param, config in template['parameters'].items():
        if not isinstance(config, dict):
            raise ValueError(f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        
        if 'min' in config and 'max' in config and config['min'] > config['max']:
            raise ValueError(f"–î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param} min –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ max")

def import_templates():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏–∑ JSON –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not Path(JSON_FILE).exists():
        print(f"‚ùå –§–∞–π–ª {JSON_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(JSON_FILE, encoding='utf-8') as f:
        templates = json.load(f)
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–∞
    textbook_ids = {t['textbook_id'] for t in templates}
    for textbook_id in textbook_ids:
        cursor.execute("SELECT 1 FROM textbooks WHERE id = ?", (textbook_id,))
        if not cursor.fetchone():
            print(f"‚ùå –£—á–µ–±–Ω–∏–∫ —Å ID {textbook_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            conn.close()
            return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
    imported_count = 0
    for tpl in templates:
        try:
            validate_template(tpl)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —à–∞–±–ª–æ–Ω
            cursor.execute('''
                SELECT 1 FROM task_templates 
                WHERE textbook_id = ? AND name = ?
            ''', (tpl['textbook_id'], tpl['name']))
            
            if cursor.fetchone():
                print(f"‚ö† –®–∞–±–ª–æ–Ω '{tpl['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
                
            cursor.execute('''
                INSERT INTO task_templates 
                (textbook_id, name, question_template, answer_template, parameters)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                tpl['textbook_id'],
                tpl['name'],
                tpl['question_template'],
                tpl['answer_template'],
                json.dumps(tpl['parameters'])
            ))
            imported_count += 1
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: '{tpl['name']}'")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ '{tpl.get('name', '')}': {str(e)}")
            conn.rollback()
    
    conn.commit()
    conn.close()
    print(f"\nüéâ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ {len(templates)}")

if __name__ == "__main__":
    import_templates()